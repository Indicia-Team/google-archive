<report
    title="Mean cover value per species per habitat"
    description="Return the average value of species cover by species and/or habitat. This is complicated by some surveys
using a basic integer for the cover, whilst on others this number is represented on a termlist."
>
  <query website_filter_field="su.website_id">
    SELECT #columns#
    FROM cache_occurrences co
      JOIN taxa_taxon_lists ttl on ttl.id=co.taxa_taxon_list_id AND ttl.deleted=false
      JOIN taxa tax on tax.id=ttl.taxon_id AND tax.deleted=false
      JOIN samples samp on samp.id=co.sample_id AND samp.deleted = false
      JOIN sample_attribute_values savHab on savHab.sample_id=samp.id AND savHab.sample_attribute_id=#habitat_attr_id# AND savHab.deleted=false
      JOIN termlists_terms ttHab ON ttHab.id = savHab.int_value AND ttHab.parent_id IS NOT NULL AND ttHab.deleted=false
      JOIN terms tHab ON tHab.id = ttHab.term_id AND tHab.term!='Not in scheme' AND tHab.deleted=false  
      JOIN surveys su on su.id=samp.survey_id AND su.deleted=false
      LEFT JOIN occurrence_attribute_values oavInt on oavInt.occurrence_id=co.id AND oavInt.occurrence_attribute_id=#cover_int_occ_attr_id# AND oavInt.deleted=false
      LEFT JOIN occurrence_attribute_values oavCov on oavCov.occurrence_id=co.id AND oavCov.occurrence_attribute_id=#cover_tt_occ_attr_id# AND oavCov.deleted=false
      LEFT JOIN termlists_terms ttCov ON ttCov.id = oavCov.int_value AND ttCov.deleted=false
      LEFT JOIN terms tCov ON tCov.id = ttCov.term_id AND tCov.deleted=false
    WHERE samp.deleted=false
      #filters#
      AND #website_filter#
    GROUP BY co.taxon,tHab.term
  </query>
  <order_bys>
    <order_by>co.taxon ASC</order_by>
  </order_bys>
  <params>
    <param name='habitat_attr_id' display='Habitat Sample Attribute Id' description='Id of the sample attribute that holds the habitat.' datatype='integer'/>
    <param name='cover_int_occ_attr_id' display='Species cover value integer attribute id' description='Id of the occurrence attribute that holds the cover integer value' datatype='integer'/>
    <param name='cover_tt_occ_attr_id' display='Species cover value termlist attribute id' description='Id of the occurrence attribute that holds the cover termlist value' datatype='lookup'/>
    <param name="survey_id" display="Surveys" datatype="lookup" population_call='report:reports_for_prebuilt_forms/Splash/get_surveys_for_population_call:id:title' emptyvalue=''>
      <where>su.id=#survey_id#</where>
    </param>
    <param name="species_id" display="Species" datatype="lookup" population_call='report:reports_for_prebuilt_forms/Splash/get_taxa_for_population_call:id:taxon' emptyvalue=''>
      <where>tax.id in (#species_id#)</where>
    </param>  
    <param name='habitat' display='Habitat' description='Habitat to report on.' datatype='lookup' emptyvalue=''
        population_call='report:reports_for_prebuilt_forms/Splash/fine_habitats_for_population_call:id:term'>
      <where>savHab.int_value=#habitat#</where>
    </param>
    <param name="ignore_dates_before" display="Ignore Dates Before" description="Ignore data created before this date." datatype="date" emptyvalue="" default="">
      <where>samp.created_on &gt;= CAST(COALESCE('#ignore_dates_before#','1500-01-01') as date)</where>
    </param>
  </params>
  <columns> 
    <column name='species' display='Species' sql='co.taxon' datatype='text' in_count="true"/>
    <column name='habitat' display='Habitat' sql='tHab.term' datatype='text' in_count="true"/>
    <column name='habitat_abbr' display='Abbreviation' sql="
    CASE 
      WHEN tHab.term='Acid fens, mires and springs' then 'AFF' 
      WHEN tHab.term='Arable field margins' then 'AFM' 
      WHEN tHab.term='Base-rich fens, mires and springs' then 'BFF' 
      WHEN tHab.term='Blanket bog' then 'BB' 
      WHEN tHab.term='Coastal saltmarsh' then 'CS' 
      WHEN tHab.term='Coastal sand dunes' then 'CSD'
      WHEN tHab.term='Coastal vegetated shingle' then 'CVS'
      WHEN tHab.term='Dry acid grassland' then 'DAG'
      WHEN tHab.term='Dry calcareous grassland' then 'DCG' 
      WHEN tHab.term='Dry deciduous woodland' then 'DDW' 
      WHEN tHab.term='Dry heathland' then 'DH'
      WHEN tHab.term='Montane dry heathland' then 'DMH'
      WHEN tHab.term='Hedgerows of native species' then 'HNS'
      WHEN tHab.term='Inland rocks and scree' then 'IRS'
      WHEN tHab.term='Machair' then 'M'
      WHEN tHab.term='Maritime cliffs and slopes' then 'MCT'
      WHEN tHab.term='Montane acid grassland' then 'MAG'
      WHEN tHab.term='Montane calcareous grassland' then 'MCG'
      WHEN tHab.term='Montane rocks and scree' then 'MRS'
      WHEN tHab.term='Native conifer woods and juniper scrub' then 'NPW'
      WHEN tHab.term='Neutral damp grassland' then 'NDG'
      WHEN tHab.term='Neutral pastures and meadows' then 'NPM'
      WHEN tHab.term='Nutrient-poor lakes and ponds' then 'NPL'
      WHEN tHab.term='Nutrient-rich lakes and ponds' then 'NRL'
      WHEN tHab.term='Raised bog' then 'RB'
      WHEN tHab.term='Rivers and streams' then 'RS'
      WHEN tHab.term='Wet heath' then 'WH'
      WHEN tHab.term='Wet woodland' then 'WW'
      ELSE tHab.term 
    END" datatype='text'/>
    <!-- A few things to note here, firstly, the all the coalesces makes sure we return at least a 0 when doing an addition, as null addition doesn't work. Then NULLIF statement make sures if we detect 0 as a species cover, it does not count towards the mean calculation at all, this behaviour is on request of client and 
    makes sense in the context of this report. Also note that the cover values get translated into percentages before being used in the calculations-->
    <column name='mean_species_cover' display='Mean Cover' sql="
      avg(NULLIF(coalesce(
        case oavInt.int_value 
          when 1 then 0.3 
          when 2 then 1.5
          when 3 then 4.3
          when 4 then 9.2
          when 5 then 16.4
          when 6 then 26.4
          when 7 then 39.4
          when 8 then 55.7
          when 9 then 75.7
          when 10 then 99.5
          END
      ,0) 
      + 
      coalesce((cast(ttCov.sort_order as float)/10),0),0))
    "/>
    <column name='standard_deviation' display='Standard Deviation' sql="
    stddev(NULLIF(coalesce(
      case oavInt.int_value 
        when 1 then 0.3 
        when 2 then 1.5
        when 3 then 4.3
        when 4 then 9.2
        when 5 then 16.4
        when 6 then 26.4
        when 7 then 39.4
        when 8 then 55.7
        when 9 then 75.7
        when 10 then 99.5
      END
    ,0) 
    + 
    coalesce((cast(ttCov.sort_order as float)/10),0),0))"/>
  </columns>
</report>