#summary How client websites authenticate using digest authentication
#labels Needs-Update

= Introduction =

When a client website makes a read or write request to the core module's data services, it is necessary to authenticate the request. In an ideal world a secure connection would be used so that the password can be passed between the client and server to authenticate. However, in Indicia there is no guarantee that the server will be on a secure socket layer so passing a password across the connection would be insecure.

Therefore, Kohana uses digest authentication, where a public token is generated and passed to the client. The client then hashes this public token with the website's ID (effectively the username) and password to create an authorisation token and passes it back to the server with the request to read or update data. The server then performs the same hash operation to check that the authorisation token was generated with the website ID and password. Note that it is not possible to decode the authorisation token to obtain the password so it is safe to pass this across insecure connections.


= Process Details =

 # When a client website requests a page is going to require authenticated capabilities, it passes the website ID to the core module data services. The nonce is generated by the server, as a unique hash of the time and some other things like server address and a private key. The following minimalistic example web page code shows how the website ID can be posted to the server to obtain a nonce:
{{{
<html>
<head>
<title>Quick demo of getting read auth</title>
</head>
<body>
<form action="http://testwarehouse.indicia.org.uk/index.php/services/security/get_read_nonce" method="post">
<label for="website_id">Website ID:</label><input type="text" name="website_id" id="website_id" />
<input type="submit" />
</form>
</body>
</html>
}}}
 # The nonce and website id are written into the server cache. The nonce is used as the key to lookup the cache value, since many nonces can be active for one website. Only the server can save the nonce in the cache. The nonce is also passed back to the client website.
 # When posting data, the client passes back the nonce, plus the auth_token which is a hash of the nonce, plus website id and password.
 # The server authenticates the request by looking up the nonce in the cache to find the website id which it is associated with. It can then hash the nonce, website id and password to check it is the same as the auth_token.