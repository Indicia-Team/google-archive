#summary A description of the reporting facilities within Indicia

= Introduction =

Indicia uses a subset of the format used in Recorder to allow custom defined reporting. This document outlines how to define a report and how to use the Indicia reporting services to run it, either from the core module or from a site module.

= Details =

== Report Format ==

At the moment, reports must be defined in an XML document similar to that used in Recorder. No formal schema exists, but the structure is sufficiently simple that an example should suffice to allow you to write reports easily. If you wish to expand the capability to support other formats, you may do so by implementing the ReportReader interface and defining a report format in the ReportEngine class. Details of this are however beyond the scope of this document.

An XML defined report might look something like this:

{{{
<?xml version="1.0" encoding="UTF-8"?>

<report title="Recent Activity" description="Lists recent activity broken down by survey.">
      <query>
      SELECT su.title as survey, w.title as website, COUNT(*) as count FROM websites w 
      JOIN occurrences o ON o.website_id = w.id
      JOIN samples s ON o.sample_id = s.id
      JOIN surveys su ON s.survey_id = su.id
      WHERE o.created_on > '#date#%'::date
      GROUP BY survey, website
      </query>
      <order_bys>
            <order_by>website ASC</order_by>
	    <order_by>survey ASC</order_by>
      </order_bys>
      <params>
	    <param name='date' display='Since: ' description='Show activity since:' datatype='date' />
      </params>
      <columns>
            <column name="survey" display="Survey Name" style="color: #ff0000;"/>
            <column name="website" display="Website Name" />
            <column name="count" display="Total no. of Occurrences" />
      </columns>
</report>
}}}

This report will return details on recent observation activity, broken down by website and survey. It takes one parameter, `date`, which sets the point after which activity should be considered - for example, setting `date` one month ago would give a report on activity within the past month.

We briefly run through the various elements within this report and provide guides as to their usage:

{{{ 
<report title="Recent Activity" description="Lists recent activity broken down by survey."> 
}}} 

The report element is the root of the document, and accepts two attributes, title and description, both self-explanatory.

{{{      
<query>
      SELECT su.title as survey, w.title as website, COUNT(*) as count FROM websites w 
      JOIN occurrences o ON o.website_id = w.id
      JOIN samples s ON o.sample_id = s.id
      JOIN surveys su ON s.survey_id = su.id
      WHERE o.created_on > '#date#%'::date
      GROUP BY survey, website
</query>
}}}

The query element is again self-explanatory for the most part, with only the note that report parameters (see below) are specified in the format `/#([a-z0-9_]+)#%/i` (where /i denotes that we are using case-insensitive patterns - thus, `Date` would equally be a valid parameter name).

{{{
      <order_bys>
            <order_by>website ASC</order_by>
	    <order_by>survey ASC</order_by>
      </order_bys>
}}}

The order_bys are appended to the end of the query in the obvious way, and can be permuted to change the ordering. If you need the order_by to appear in the middle of the query rather than at the end, you can place a marker in your query as in the following example. This is useful when you need something in the query after the ORDER BY, such as a LIMIT. 

{{{      
<query>
      SELECT su.title as survey, w.title as website, COUNT(*) as count FROM websites w 
      JOIN occurrences o ON o.website_id = w.id
      JOIN samples s ON o.sample_id = s.id
      JOIN surveys su ON s.survey_id = su.id
      WHERE o.created_on > '#date#%'::date
      GROUP BY survey, website
      #order_by#
      LIMIT 10
</query>
}}}

{{{
      <params>
	    <param name='date' display='Since: ' description='Show activity since:' datatype='date' />
      </params>
}}}

Parameters may be specified to allow the report requester to specify information at compile-time. In the example above, the report requester will receive a prompt to enter a date, which will then be used in the query. Parameters take four attributes and have no child elements:

  * `name` should match the name given in the query, excluding the # and #% terminators. Thus, in the example above, the parameter name 'date' matches the pattern '#date#%' in the query.
  * `display` is the text used to label the parameter in the parameter request screen.
  * `description` gives a further description, and may be used in describing reports/parameters.
  * `datatype` is used in determining the type of control to show when requesting the parameter. Currently, the core module report interface supports datatypes 'text' and 'date', with all other values defaulting to text. Date will show a datepicker control. Those implementing reporting on a site module may of course extend this to support whatever datatypes they wish to allow, and further types such as geometry and lookup lists are likely to be implemented within the core module - obviously lookup lists may require an extension of the report format, which will be documented as and when.

{{{
      <columns>
            <column name="survey" display="Survey Name" style="color: #ff0000;"/>
            <column name="website" display="Website Name" />
            <column name="count" display="Total no. of Occurrences" />
      </columns>
}}}

Columns are used to give further specification to how particular fields should be displayed. They take three attributes and have no child elements:

  * `name` should match the name used in the query - SELECT foo FROM websites should have name `foo`, SELECT bar AS baz FROM websites should have name `baz` (not `bar`). SELECT w.foo FROM websites should have name `foo`, not `w.foo`, though where there is ambiguity here renaming your columns with 'AS' is the recommended solution. Failing to match this correctly may leave phantom columns in the report.
  * `display` will be displayed as the column header.
  * `style` will be applied to the column (though not the header - obviously implementers of the reporting in a site module may alter this behaviour if they wish).

Note that both columns and parameters will be inferred from the query if they are not provided, but providing them explicitly is recommended as it allows a much greater degree of control over how they are displayed.

== Reporting Engine Configuration ==

The reporting engine is included by default in the Indicia core install. Certain configuration settings must be made to allow it to work. Many of these should happen automatically with a fresh install, but users working with existing installations may have to complete them manually.

  # Local Report Directory. A directory for storage of local reports must be defined in the indicia.php config file. A default setting is stored in config/indicia.php and will default to 'reports'.
  # Read-only database user. It is strongly recommended that a second database user is configured for the reporting services with read-only permissions (ability to execute only SELECT statements). This will prevent any use of the open SQL query functions in the reporting services to make changes to your database. Further, the report user should not have access to the websites, users, people, users_websites or user_tokens tables. Access to specific information in these tables where it is required should be done with the report_users, report_people, report_users_websites and report_websites views (there should be no need to access anything in user_tokens). Hopefully a future install procedure will configure this automatically.
  # Reporting database configuration. Because we want to access the database using a read-only user for security purposes, we need to define a second database connection in Kohana using our new user. In database.php there should be an entry for $config['report'] - if it does not exist, copy the default entry and change the name. You should configure the username and password properties here to use your new, read-only user. The report services will automatically use this connection.

== Core Module Reporting ==

Currently, the only concrete implementation of the reporting is on the core module, and can be accessed through the 'Entered Data' menu. Provided things have been configured correctly, you should see a list of sample reports provided with the system. To test a report, go to 'my report title' and enter the species name '%'. This should return a list of all taxa defined on your core installation.

=== Adding new reports ===

To add new reports as defined in the format above, simply drop them (with extension .xml) into the folder configured as your localReportDir - in most installations this will be $INDICIA_HOME/reports/. They should appear automatically in the report browser screen.

=== Remote reports ===

Whilst support for remotely defined and stored reports is available, an interface to it waits on some security concerns. When these have been resolved, an option should become available below the report browser to specify your own reports or link them from elsewhere.

== Site Module reporting ==

Provided the data services module is enabled within the Indicia core, you should be able to access the reporting services through the url http://localhost/indicia/index.php/services/report. You can test whether this is working by going to http://localhost/indicia/index.php/services/report/listLocalReports. This should return a list of all reports local to the Indicia Core.

=== Functions available through the report service interface ===

The following functions are available through this url:

  * listLocalReports($descriptionLevel) - provides a list of the reports available locally. By changing the $descriptionLevel you can alter the level of detail given on each report, from 0 (just names) to 3 (full detail).
  * requestReport - requestReport is the principal method used to access reports. This will be covered in detail later.
  * resumeReport($uid) - resume a report suspended in order to request further parameter details. The $uid will have been provided along with the parameter request.

==== requestReport ====

The requestReport function should be provided with a POST array containing the following keys:

  * `report`
  * `reportSource`
  * `reportFormat`
  * `params`

`report` can be one of three things:
 # The filename of a report in localReportDir
 # The URI of a remote report
 # The text of a report

`reportSource` identifies the source, so should be one of
 # 'local' - for local reports
 # 'remote' - for when a URI is provided
 # 'provided' - for when the report is provided in the 'report' value.

`params` may be used when you wish to autocomplete certain parameters rather than being prompted for them. If used, it should be a JSON-encoded array of parameter name pointing to parameter value.

==== resumeReport ====

The resumeReport function takes a POST array which should contain the following keys:

  * `params`
  * `uid` (optional)

`params` should point to a JSON-encoded array of parameter name to value.
`uid` should point to the uid given in the parameterRequest. You may omit this key and instead provide it as an argument to the resumeReport function in a RESTful manner, that is: report/resumeReport/6074a1fb2cf7435d6563bba53a8d11b5.


=== parameterRequest ===

If there are unprovided parameters in the report request, the service will respond with a parameter request. This will look like

{{{
{"parameterRequest":{"searchstring":{"datatype":"text","display":"Species Name","description":"Taxon name (any language) to search for."}},"uid":"6074a1fb2cf7435d6563bba53a8d11b5"}
}}}

The uid is provided to resume processing the report. When you have captured parameter data from the user, this should be send to the `resumeReport` function as described above.

=== Response ===

The final response provided will look like

{{{
{"formattedReport":"<table class='report'><thead><th>ID<\/th><th>Species Name<\/th><\/thead><tbody><tr><td style=''>4<\/td><td style='color: #ff0000;'>Adonis Blue<\/td><\/tr><tr><td style=''>3<\/td><td style='color: #ff0000;'>Common Blue<\/td><\/tr><tr><td style=''>6<\/td><td style='color: #ff0000;'>Green Hairstreak<\/td><\/tr><tr><td style=''>2<\/td><td style='color: #ff0000;'>Red Admiral<\/td><\/tr><tr><td style=''>1<\/td><td style='color: #ff0000;'>Ringlet<\/td><\/tr><tr><td style=''>5<\/td><td style='color: #ff0000;'>Speckled Wood<\/td><\/tr><\/tbody><\/table>"}
}}}

and may be dealt with as you please.

=== Error ===

Should an error occur during the processing, a reponse looking like the following shall be given:

{{{
{"error":"Trying to resume a report but one or more of params or uid is null","uid":"6074a1fb2cf7435d6563bba53a8d11b5","params":null}
}}}

The error key will always be given in the error response, along with other keys specific to the error.