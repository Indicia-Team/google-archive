#summary How to ensure that your regular backups are capturing database content.

= Introduction =
You may be performing regular backups of your server but you can't be sure that you are getting a consistent snapshot of database contents if the database is active, with files open and being modified during the backup.
To overcome this, both PostgreSQL and MySql can perform scheduled dumps to file which are guaranteed to be consistent. These files can then be copied as part of your routine backup, ensuring your data is kept safe.
This article gives guidance on what I did to set this up on a Windows server.

= Details =

== PostgreSQL ==

First of all, [http://www.postgresonline.com/journal/index.php?/archives/19-Setting-up-PgAgent-and-Doing-Scheduled-Backups.html  read the following article]! I installed [http://www.pgadmin.org/docs/1.8/pgagent-install.html PgAgent], following the three steps in the article. (Although, after setting up MySQL backups, I guess I would have been just as happy using Windows task scheduler.)

Step 1, installing plpgsql, can be carried out by starting pgAdmin, selecting the postgres database, and selecting the Tools > Query tool menu item to open a window in which the sql command can be copied and run.

Step 2, running pgagent.sql can be carried out in the same query window used in step 1 by using File > Open on the script. I found it in C:\Program Files\PostgreSQL\8.3\pgAdmin III\scripts.

Step 3, installing the pgAgent service, is executed at the operating system command prompt. Check the path of your posstgreSQL installation first. Check also for the existance of an operating system user called postgres. Add an extra option on the command line, -l2, (minus el two) to enable some error logging which may come in handy.

While pg_agent is running as operating system user, postgres, it connects to the database as database user, postgres. That's right two different users, in two different contexts but with the same name. Try not to get confused!

When creating the backup job, mine was so simple that I didn't use a batch file. You can probably improve on this. The crux of the matter is that we use pgAgent to schedule a call to [http://www.postgresql.org/docs/8.0/interactive/app-pgdump.html pg_dump] which is what actually does the backup. The definition of my job-step reads {{{"C:\Program Files\PostgreSQL\8.3\bin\pg_dump.exe" -h localhost -p 5432 -U postgres -F c -b -v -f "D:\Indicia Backup\Scheduled\warehouse1.backup" warehouse1}}}

This will dump my database, called warehouse1, into the warehouse1.backup file. For this to work I had to give the operating system user, postgres, write privileges to the folder I had created for the purpose.

Both pgAgnet and pg_dump are connecting to the database as user postgres and so require the corresponding database password. For security, this password is not given on the command line but is stored in a [http://www.postgresql.org/docs/current/static/libpq-pgpass.html file]. The article we are following does not make this clear.

I created the file, pgpass.conf in the folder C:\Documents and Settings\postgres\Application Data\postgresql. It contained the following line

{{{localhost:*:*:postgres:password}}}

where you need to replace the word password with your actual password

I also had to define the APPDATA environment variable for user postgres.

To define this environment variable I went to Start>Runâ€¦ and entered {{{runas /user:postgres cmd}}} to open a command prompt, then executed {{{set APPDATA=C:\Documents and Settings\postgres\Application Data}}}





== MySql ==
Login to server as administrator

Create a new user. We will give them the name mysql in this example, but use what you like.
If you administer your server remotely, add the user to the group, Remote Desktop Users.

Create a folder to store your backup files.
Give mysql read, write and modify permissions to the folder.

In a command prompt execute the following command to give mysql rights to create scheduled tasks.
cacls c:\windows\tasks /e /g mysql:c

Login to MySql Administrator as root
Create a new user which we will call backup in this example.
Give backup select, show view and lock_tables privileges on each schemata you want to backup.

Now log in to the server as mysql
Start MySql Administrator and create a stored connection, enabling password storage in the general options category first. The connection is for user backup.
Now login using this stored connection.
If you don't want backups to accumulate, go to Tools > Options and, in the administrator category, deselect Add Date/Time to Backup Files. Successive backups will overwrite previous ones if you do this. Apply and close the dialog.
Select the backup view. All the schemata you granted permissions to will be in the list. You can either create one backup project for everything or a number of smaller projects. If you create one big backup you can still select to restore individual tables within schemata but it just takes longer to analyse the file.
Create a new backup project, select backup content and define a schedule. When you save the project you will have to give the credentials of the user mysyl under whose login the backup will run.

If you want to test your configuration, you can go to Control Panel > Scheduled Tasks and run your task.