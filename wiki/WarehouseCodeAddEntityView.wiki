#summary Details of how to add the views required for a warehouse entity
#labels Phase-Implementation

= Creating the view code required for a warehouse entity =

View code is slightly different to the PHP code required for controllers and models in that it is not a PHP class, simply a template mixing HTML and PHP code required to generate the output. Also there is not a one to one match between entities and view code files unlike controllers and models as each entity can have views for the index and edit pages as well as other sub-templates required to construct the page.

== Placement of view files ==

Although not a requirement of the Kohana framework, by following certain conventions when creating view files you will gain maximum benefit from the generic code written for Indicia. For each entity, create a folder in _application/views/_ with the singular entity name. Then create an index view file called _index.php_ and a file called by the singular entity name, then underscore, then edit.php, e.g. `sample_edit.php`. 

== index.php ==

For the index view file, generally you will first want to output the grid which is created for you in a variable called `$grid`. Put simply 
{{{
<?php 
echo $grid;
?>
}}}
is enough to do this. Next, output a simple HTML form with a button for calling the create controller action, as in the following example for the language index view:
{{{
<form action="<?php echo url::site().'language/create'; ?>" method="post">
<input type="submit" value="New language" class="ui-corner-all ui-state-default button" />
</form>
}}}

Finally, if you want to allow upload of CSV data then the form for doing this is pre-constructed in the `$upload_csv_form` variable.
{{{
<?php echo $upload_csv_form ?>
}}}

That gives you the basics required for an index view, it can of course include other code but there are plenty of examples in the existing warehouse code if you want to see other ideas.

== `*_edit.php` ==

This file constructs the edit form for the entity. Some general principles:
  * Although this is not the case for some existing code in the warehouse, new edit forms should use the data entry helper classes to generate their output. 
  * There is an array called $values which contains the database values for each field (in form _entity:fieldname_).
  * There is an array called $other_data which contains any data loaded in the controller's `prepareOtherViewData` method. 
  * User `html::initial_value($values, 'entity:fieldname')` to get the default value to load into any control.
  * There is a variable called $metadata which contains the expandable block to show the metadata for the record.

So, in the edit PHP file, first require the `data_entry_helper.php` file:
{{{
<?php

require_once(DOCROOT.'client_helpers/data_entry_helper.php');
}}}

Next, ensure that any validation errors are output to the page:
{{{
if (isset($_POST))
  data_entry_helper::dump_errors(array('errors'=>$this->model->getAllErrors()));
?>
}}}

Create a post form to put controls into with the action set to the controller's save method, as in this example from the sample edit view which includes the metadata block output:
{{{
<form class="cmxform" action="<?php echo url::site().'sample/save' ?>" method="post" id="sample-edit">
<?php echo $metadata; ?>
<fieldset>

</fieldset>
</form>
<fieldset>
}}}

Output any hidden IDs required for the primary key and foreign keys in the edited record. In this example we output the sample ID, plus the linked survey and website. From now on the code should be inserted into the `<fieldset>` element in the form code.
{{{
<input type="hidden" name="sample:id" value="<?php echo html::initial_value($values, 'sample:id'); ?>" />
<input type="hidden" name="sample:survey_id" value="<?php echo html::initial_value($values, 'sample:survey_id'); ?>" />
<input type="hidden" name="website_id" value="<?php echo html::initial_value($values, 'website_id'); ?>" />
}}}

Now, if your controls require a read authorisation then obtain the read authorisation tokens. Note that warehouse authorisation requires the negative user ID and the configured private key, NOT the website ID and password. This step is not necessary unless you have a control on the form with a requirement for read authorisation tokens.
{{{
<?php 
$readAuth = data_entry_helper::get_read_auth(0-$_SESSION['auth_user']->id, kohana::config('indicia.private_key'));
}}}

Output each control required using the data_entry_helper class. Remember to include the default value. Note that validation errors will be output automatically. In this example we output a text input to type a location name into:
{{{
echo data_entry_helper::text_input(array(
  'label' => 'Location Name',
  'fieldname' => 'sample:location_name',
  'default' => html::initial_value($values, 'sample:location_name')
));
}}}

Inside the form element at the end, insert code to output the form buttons (Save, Cancel, Delete), plus to link in the JavaScript and default stylesheet. Note that because the warehouse template includes some JavaScript libraries in the header we inform the data_entry_helper class to skip those library references rather than duplicate them:
{{{
echo html::form_buttons($id!=null, false, false); 
data_entry_helper::$dumped_resources[] = 'jquery';
data_entry_helper::$dumped_resources[] = 'jquery_ui';
data_entry_helper::$dumped_resources[] = 'fancybox';
data_entry_helper::enable_validation('sample-edit');
data_entry_helper::link_default_stylesheet();
echo data_entry_helper::dump_javascript();

?>
}}}

Once you have constructed all the controls you require you should have a working index and edit page. Make sure that you can save a new record, input a value that should fail validate and see the result, correct it and save the record, plus edit and delete existing records.

<table width="100%"><tr>
<td align="left">Previous: [WarehouseCodeAddEntityController Controller code required for warehouse entities]</td>
</tr></table>