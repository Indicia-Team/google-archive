#summary The data entry helper acts as a very simple site-module builder to facilitate developing surveys using Indicia Core.

= Introduction =

The data_entry_helper class provides a number of static methods that simplify creation of surveys using the Indicia Core:

  * static void autocomplete ( $id,  $entity,  $nameField, [ $valueField = null], [$extraParams = null])
  * static void dump_errors ( $response)
  * static void forward_post_to ( $entity, [ $array = null])
  * static void get_auth ( $website_id,  $password)
  * static void get_read_auth ( $website_id,  $password)
  * static void listbox ( $id,  $entity,  $nameField, [ $size = 3], [ $multival = false], [ $valueField = null], [ $extraParams = null])
  * static void map_picker ( $field_name,  $systems, [ $value = ''], [ $width = 600], [ $height = 350], [ $instruct = null])
  * static void radio_group ( $id,  $entity,  $nameField, [ $valueField = null], [ $extraParams = null])
  * static string select (int $id, string $entity, string $nameField, [string $valueField = null], [map $extraParams = null])
  * static void species_checklist (int $list_id, int[] $occ_attrs, string[] $readAuth, [string[] $extraParams = array()])
  * static void wrap ( $array,  $entity, [ $fkLink = false])
  * static array wrap_attributes ( $arr,  $entity)
  * static void wrap_species_checklist ( $arr)

= Method Details =


static method autocomplete (line 222)

Helper function to generate an autocomplete box from an Indicia core service query.

    * access: public

`static void autocomplete ( $id,  $entity,  $nameField, [ $valueField = null], [ $extraParams = null])`

    * $id
    * $entity
    * $nameField
    * $valueField
    * $extraParams

static method dump_errors (line 456)

Takes a response, and outputs any errors from it onto the screen.

    * todo: method of placing the errors alongside the controls.
    * access: public

`static void dump_errors ( $response)`

    * $response

static method forward_post_to (line 305)

    * access: public

`static void forward_post_to ( $entity, [ $array = null])`

    * $entity
    * $array

static method get_auth (line 556)

Retrieves a token and inserts it into a data entry form which authenticates that the form was submitted by this website.

    * access: public

`static void get_auth ( $website_id,  $password)`

    * $website_id
    * $password

static method get_read_auth (line 533)

Retrieves a read token and passes it back as an array suitable to drop into the 'extraParams' options for an Ajax call.

    * access: public

`static void get_read_auth ( $website_id,  $password)`

    * $website_id
    * $password

static method listbox (line 184)

Helper function to generate a list box from a Indicia core service query.

    * access: public

`static void listbox ( $id,  $entity,  $nameField, [ $size = 3], [ $multival = false], [ $valueField = null], [ $extraParams = null])`

    * $id
    * $entity
    * $nameField
    * $size
    * $multival
    * $valueField
    * $extraParams

static method map_picker (line 497)

Puts a spatial reference entry control, optional system selector, and map onto a data entry form.

The system selector is automatically output if there is more than one system present, otherwise it is replaced by a hidden input.

    * access: public

`static void map_picker ( $field_name,  $systems, [ $value = ''], [ $width = 600], [ $height = 350], [ $instruct = null])`

    * $field_name
    * $systems
    * $value
    * $width
    * $height
    * $instruct

static method radio_group (line 276)

Helper function to generate a radio group from a Indicia core service query.

    * access: public

`static void radio_group ( $id,  $entity,  $nameField, [ $valueField = null], [ $extraParams = null])`

    * $id
    * $entity
    * $nameField
    * $valueField
    * $extraParams

static method select (line 148)

Helper function to generate a select control from a Indicia core service query.

    * return: HTML code for a select control.
    * access: public

`static string select (int $id, string $entity, string $nameField, [string $valueField = null], [map $extraParams = null])`

    * int $id: id attribute for the returned control.
    * string $entity: Name (Kohana-style) of the database entity to be queried.
    * string $nameField: Field to draw values to show in the control from.
    * string $valueField: Field to draw values to return from the control from. Defaults to the value of $nameField.
    * map $extraParams: string> $extraParams Associative array of items to pass via the query string to the service.

static method species_checklist (line 27)

Helper function to generate a species checklist from a given taxon list.

This function will generate a flexible grid control with one row for each species in the specified list. For each row, the control will display the list preferred term for that species, a checkbox to indicate its presence, and a series of cells for a set of occurrence attributes passed to the control.

Further, the control will incorporate the functionality to add extra terms to the control from the parent list of the one given. This will take the form of an autocomplete box against the parent list which will add an extra row to the control upon selection.

    * access: public

`static void species_checklist (int $list_id, int[] $occ_attrs, string[] $readAuth, [string[] $extraParams = array()])`

    * int $list_id: list_id Database id of the taxon list to lookup against.
    * int[] $occ_attrs: occ_attrs Integer array, where each entry corresponds to the id of the desired attribute in the occurrence_attributes table.
    * string[] $readAuth: readAuth The read authorisation key/value pair, needed for making queries to the data services.
    * string[] $extraParams: extraParams Array of key=>value pairs which will be passed to the service as GET parameters.

static method wrap (line 407)

    * access: public

`static void wrap ( $array,  $entity, [ $fkLink = false])`

    * $array
    * $entity
    * $fkLink

static method wrap_attributes (line 373)

Wraps attribute fields (entered as normal) into a suitable container for submission.

Throws an error if $entity is not something for which attributes are known to exist.

    * access: public

`static array wrap_attributes ( $arr,  $entity)`

    * $arr
    * $entity

static method wrap_species_checklist (line 335)

Wraps data from a species checklist grid (generated by data_entry_helper::species_checklist) into a suitable format for submission. This will return an array of submodel entries which can be dropped directly into the subModel section of the submission array.

    * access: public

`static void wrap_species_checklist ( $arr)`

    * $arr

== Config ==

Site-wide config options should be declared in helper_config.php. These options should be declared as follows:

  * `$config['base_url'] = http://localhost/indicia`

Currently the available options are:

 * base_url: URL of the indicia core instance you are trying to connect to.