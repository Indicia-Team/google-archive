<?php
/**
 * @file
 * Defines taxon identifier field types, including taxon version keys
 * and BRC codes.
 */

/*******************************************************************************
 * Field Hooks
 ******************************************************************************/

/**
 * Implements hook_field_info().
 */
function taxon_identifier_field_info() {
  return array(
    'tvk' => array(
      'label' => t('Taxon Version Key'),
      'description' => t('Store taxon version keys in the database.'),
      'settings' => array('max_length' => '255'),
      'default_widget' => 'other',
      'default_formatter' => 'nbn_map',
    ),
    'rtlik' => array(
      'label' => t('Recommended Taxon List Item Key'),
      'description' => t('Store recommended taxon list item keys in the database.'),
      'settings' => array('max_length' => '255'),
      'default_widget' => 'other',
      'default_formatter' => 'nbn_designations',
    ),
    'brc' => array(
      'label' => t('BRC code'),
      'description' => t('Store BRC Codes in the database.'),
      'settings' => array('max_length' => '255'),
      'default_widget' => 'brc',
      'default_formatter' => 'indicia_map',
    ),
    'gbif' => array(
      'label' => t('GBIF Species Number'),
      'description' => t('Store a GBIF species number in the database.'),
      'settings' => array('max_length' => '255'),
      'default_widget' => 'other',
      'default_formatter' => 'gbif_map',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function taxon_identifier_field_schema($field) {
  switch ($field['type']) {
    case 'tvk':
    case 'rtlik':
      $columns['value'] = array(
        'type' => 'char',
        'length' => 16,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      break;

    case 'brc':
      // BRC code has 2 parts.
      // @todo: How long are these fields?
      $columns['value_1'] = array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      $columns['value_2'] = array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
      break;

    case 'gbif':
      $columns['value'] = array(
        'type' => 'int',
        'not null' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE,
      );
  }

  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_field_prepare_view().
 */
function taxon_identifier_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (isset($item['value'])) {
      $items[$delta]['safe_value'] = preg_replace("/[^A-Z0-9]/", "", $item['value']);
    }
    if (isset($item['value_1'])) {
      $items[$delta]['safe_value_1'] = preg_replace("/[^A-Z0-9]/", "", $item['value_1']);
    }
    if (isset($item['value_2'])) {
      $items[$delta]['safe_value_2'] = preg_replace("/[^A-Z0-9]/", "", $item['value_2']);
    }
  }
}

/**
 * Implements hook_field_validate().
 */
function taxon_identifier_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if (is_array($items)) {
    foreach ($items as $delta => $item) {
      $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
      if (is_array($item) && isset($item['_error_element'])) {
        unset($item['_error_element']);
      }
      switch ($field['type']) {
        case 'tvk':
        case 'rtlik':
          // TVK and TLIKs must be valid 16 character NBN keys, 0-9+A-Z only.
          // Or null...
          if (!empty($item['value'])) {
            // Check length is 16 characters.
            if (drupal_strlen($item['value']) != 16) {
              form_set_error($error_element, t('%name: the value must be 16 characters long.', array('%name' => $field['widget']['label'])));
            }
            // Check 0-9A-Z only.
            if (!preg_match('/^[0-9,A-Z]*$/', $item['value'])) {
              form_set_error($error_element, t('%name: the value consist of characters 0-9 and A-Z only.', array('%name' => $field['widget']['label'])));
            }
          }
          break;

        case 'brc':
          // @todo BRC code validation.
          break;

        case 'gbif':
          // @todo GBIF number validation.
          break;
      }
    }
  }
}

/**
 * Implements hook_field_views_data().
 */
function taxon_identifier_field_views_data($field) {
  $data = field_views_field_default_views_data($field);
  return $data;
  /*
  // @todo: views integration testing.
  $allowed_values = content_allowed_values($field);
  if (count($allowed_values)) {
    $data = content_views_field_views_data($field);
    $table_alias = content_views_tablename($field);

    // Filter: Add a 'many to one' filter.
    $copy = $data[$table_alias][$field['field_name'] . '_value'];
    $copy['title'] = t('@label (!name) - Allowed values', array('@label' => t($field['widget']['label']), '!name' => $field['field_name']));
    $copy['filter']['handler'] = 'content_handler_filter_many_to_one';
    unset($copy['field'], $copy['argument'], $copy['sort']);
    $data[$table_alias][$field['field_name'] . '_value_many_to_one'] = $copy;
    // Argument : swap the handler to the 'many to one' operator.
    $data[$table_alias][$field['field_name'] . '_value']['argument']['handler'] = 'content_handler_argument_many_to_one';
    return $data;
  }
  */

}

/**
 * Implements hook_field_is_empty().
 */
function taxon_identifier_field_is_empty($item, $field) {
  switch ($field['type']) {
    case 'tvk':
    case 'rtlik':
    case 'gbif':
      if (empty($item['value']) && (string) $item['value'] !== '0') {
        return TRUE;
      }
      return FALSE;

    case 'brc':
      if (empty($item['value_1']) && (string) $item['value_1'] !== '0' && empty($item['value_2']) && (string) $item['value_2'] !== '0') {
        return TRUE;
      }
      return FALSE;
  }
}

/*******************************************************************************
 * Widget Hooks
 ******************************************************************************/

/**
 * Implements hook_field_widget_info().
 *
 * Defines widgets for BRC Codes and any other field types. Here we indicate 
 * that the field module will handle the default value and multiple
 * values for these widgets.
 */
function taxon_identifier_field_widget_info() {
  return array(
    'brc' => array(
      'label' => t('Text field'),
      'field types' => array('brc'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'other' => array(
      'label' => t('Text field'),
      'field types' => array('gbif', 'tvk', 'rtlik'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements FAPI hook_elements().
 *
 * Defines the data entry forms for widgets and how they are processed.
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function taxon_identifier_elements() {
  return array(
    'brc' => array(
      '#input' => TRUE,
      '#process' => array('brc_process'),
    ),
    'other' => array(
      '#input' => TRUE,
      '#process' => array('other_process'),
    ),
  );
}

/**
 * FAPI Process method for brc fields. Returns the edit form required.
 */
function brc_process($element, $edit, &$form_state, $form) {
  $defaults = $element['#value'];
  $element['value_1'] = array(
    '#title' => t($element['#title']) . ' 1',
    '#type' => 'textfield',
    '#default_value' => $defaults['value_1'],
    '#weight' => 1,
  );
  $element['value_2'] = array(
    '#title' => t($element['#title']) . ' 2',
    '#type' => 'textfield',
    '#default_value' => $defaults['value_2'],
    '#weight' => 1,
  );
  return $element;
}

/**
 * FAPI Process method for generic fields. Returns the edit form required.
 */
function other_process($element, $edit, &$form_state, $form) {
  $defaults = $element['#value'];
  $element['value'] = array(
    '#title' => t($element['#title']),
    '#type' => 'textfield',
    '#default_value' => $defaults['value'],
    '#weight' => 1,
  );
  return $element;
}

/**
 * Theme function for the brc widget.
 */
function theme_brc($element) {
  return $element['#children'];
}

/**
 * Theme function for the default widget.
 */
function theme_other($element) {
  return $element['#children'];
}

/**
 * Implements hook_field_widget_form().
 * 
 */
function taxon_identifier_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Use += to avoid overwriting incoming $element.
  $element += array(
    '#type' => $field['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function taxon_identifier_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}

/*******************************************************************************
 * Formatter Hooks
 ******************************************************************************/

/**
 * Implements hook_field_formatter_info().
 */
function taxon_identifier_field_formatter_info() {
  return array(
    'taxon_identifier' => array(
      'label' => t('Default'),
      'field types' => array('tvk', 'rtlik', 'brc', 'gbif'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function taxon_identifier_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $formatter = $display['type'];
  foreach ($items as $delta => $item) {
    $element[$delta] = array('#markup' => $item['value']);
  }
  return $element;
}
