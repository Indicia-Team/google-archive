<?php
/*
 * Submit the relevant information to indicia
 */
iform_load_helpers(array('report_helper', 'data_entry_helper'));

/**
 * Implementation of hook_menu().
 */
function iform_remote_download_menu() {
  $items = array();

  // Mobile registration-based actions
  $items['user/remote_download/privileges'] = array(
    'title'             => 'Gets the download privileges for a remote logged in user',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_remote_download_privileges',
    'access callback'   => TRUE,
  );
  $items['user/remote_download/download'] = array(
    'title'             => 'Gets a download CSV file',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_remote_download_download',
    'access callback'   => TRUE,
  );

  return $items;
}

/**
 * Returns the download privileges for this user, i.e. if they can download only their own records or have access to verification or collation data.
 */
function iform_remote_download_privileges() {
  watchdog('iform rd', 'Authenticating');
  if (!iform_remote_download_authenticate())
    return;
  watchdog('iform rd', 'Authenticated');
  global $user;
  $types = array('my-records');
  if (user_access('verification', $user)) {
    $types[] = 'expert-records';
  }
  if (user_access('collate regional records', $user)) {
    $types[] = 'collate-records';
  }
  // read the available surveys from the warehouse
  $readAuth = data_entry_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  $data = data_entry_helper::get_population_data(array(
    'table' => 'survey',
    'extraParams' => $readAuth + array('sharing' => 'data_flow', 'orderby'=>'website,title', 'view'=>'detail')
  ));
  $surveys=array();
  foreach ($data as $survey) {
    $surveyTitle = strcasecmp(substr($survey['website'], 0, strlen($survey['title'])), $survey['title'])===0 ? $survey['title'] : "$survey[website] $survey[title]";
    $surveys[$survey['id']] = $surveyTitle;
  }
  drupal_add_http_header('Content-type', 'application/json; charset=UTF-8');
  print json_encode(array('types' => $types, 'surveys' => $surveys));
}

/**
 * Perform the download of a chunk of records, by running a report against the warehouse.
 */
function iform_remote_download_download() {
  if (!iform_remote_download_authenticate()) 
    return;
  global $user;
  $user_obj = entity_metadata_wrapper('user', $user);
  $type = $_POST['type'];
  $report = $type === 'collate-records' ? 'remote_download_by_input_date_using_spatial_index_builder' : 'remote_download';
  $readAuth = report_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  try {
    $location_id = $type==='collate-records' ? $user_obj->field_location_collation->value() : $user_obj->field_location_expertise->value();
  } catch (Exception $e) {
    $location_id = '';
  }
  $options = array(
    'dataSource' => "library/occurrences/$report",
    'readAuth' => $readAuth,
    'extraParams' => array(
      'date_from' => $_POST['date_from'],
      'date_to' => $_POST['date_to'],
      'quality' => '!R',  // todo: parameterise
      'smpattrs' => empty($_POST['smpAttrs']) ? '' : $_POST['smpAttrs'],
      'occattrs' => empty($_POST['occAttrs']) ? '' : $_POST['occAttrs'],
      'searchArea' => '',
      'idlist' => '',
      'ownData' => $type==='my-records' ? 1 : 0,
      'currentUser' => $user_obj->field_indicia_user_id->value(),
      'ownLocality' => $type==='my-records' || empty($location_id) ? 0 : 1,
      'location_id' => $location_id,
      'taxon_groups' => '',
      'ownGroups' => 0,
      'surveys' => empty($_POST['survey_id']) ? '' : $_POST['survey_id'],
      'ownSurveys' => empty($_POST['survey_id']) ? 0 : 1,
    ),
    'sharing' => 'data_flow'    
  );
  if (!empty($_POST['offset']))
    $options['extraParams']['offset'] = $_POST['offset'];
  if (!empty($_POST['limit']))
    $options['extraParams']['limit'] = $_POST['limit'];
  if (!empty($_POST['wantCount']))
    $options['extraParams']['wantCount'] = $_POST['wantCount'];
  $records = report_helper::get_report_data($options);
  drupal_add_http_header('Content-type', 'application/json; charset=UTF-8');
  print json_encode($records);
}

/**
 * Authenticates the download appsecret, usersecret are correct and returns TRUE if OK.
 */
function iform_remote_download_authenticate() {
  $shared_secret = variable_get('iform_mobile_auth_shared_secret',NULL);
  $usersecret = $_POST['usersecret'];
  $appsecret = $_POST['appsecret'];
  $email = $_POST['email'];
  $usersecret_field = 'field_iform_auth_shared_secret';
  // Step 1
  // Verify APP shared secret
  if (empty($appsecret) || trim($appsecret) != trim($shared_secret))
  {
    watchdog('iform RD', 'Missing or incorrect shared app secret');
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request missing or incorrect app secret';
    return FALSE;
  }
  // Step 2.
  // Locate corresponding user
  $existing_user = user_load_by_mail($email);
  if ($existing_user===FALSE) {
    watchdog('iform RD', 'Incorrect email');
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request incorrect email';
    return FALSE;
  }
  $existing_user_obj = entity_metadata_wrapper('user', $existing_user);
  // Step 3.
  // Verify USER shared secret...
  if (empty($usersecret) || trim($usersecret) != trim($existing_user_obj->$usersecret_field->value()))
  {
    watchdog('iform RD', 'User secret incorrect');
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request user secret incorrect';
    return FALSE;
  }
  // Step 4.
  // Check user activation status
  if ($existing_user->status != 1)
  {
    watchdog('iform RD', 'User not activated');
    drupal_add_http_header('Status', '407 Proxy Authentication Required');
    print 'User not activated';
    return;
  }
  watchdog('iform RD', 'Got user '.$existing_user->uid);
  $GLOBALS['user'] = $existing_user;
  return TRUE;
}