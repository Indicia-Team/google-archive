<?php
/*
 * Submit the relevant information to indicia
 */
iform_load_helpers(array('report_helper', 'data_entry_helper'));

/**
 * Implementation of hook_menu().
 */
function iform_remote_download_menu() {
  $items = array();

  // Mobile registration-based actions
  $items['user/remote_download/privileges'] = array(
    'title'             => 'Gets the download privileges for a remote logged in user',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_remote_download_privileges',
    'access callback'   => TRUE,
  );
  $items['user/remote_download/download'] = array(
    'title'             => 'Gets a download CSV file',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_remote_download_download',
    'access callback'   => TRUE,
  );
  $items['remote_download/autogenerate'] = array(
    'title'             => 'Prepares download CSV files for known users',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_remote_download_autogenerate',
    'access callback'   => 'user_access',
    'access arguments'  => array('autogenerate downloads'),
  );

  return $items;
}

/**
 * Returns the download privileges for this user, i.e. if they can download only their own records or have access to verification or collation data.
 */
function iform_remote_download_privileges() {
  watchdog('iform rd', 'Authenticating');
  if (!iform_remote_download_authenticate())
    return;
  watchdog('iform rd', 'Authenticated');
  global $user;
  $types = array('my-records');
  if (user_access('verification', $user)) {
    $types[] = 'expert-records';
  }
  if (user_access('collate regional records', $user)) {
    $types[] = 'collate-records';
  }
  // read the available surveys from the warehouse
  $readAuth = data_entry_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  $data = data_entry_helper::get_population_data(array(
    'table' => 'survey',
    'extraParams' => $readAuth + array('sharing' => 'data_flow', 'orderby'=>'website,title', 'view'=>'detail')
  ));
  $surveys=array();
  foreach ($data as $survey) {
    $surveyTitle = strcasecmp(substr($survey['website'], 0, strlen($survey['title'])), $survey['title'])===0 ? $survey['title'] : "$survey[website] $survey[title]";
    $surveys[$survey['id']] = $surveyTitle;
  }
  drupal_add_http_header('Content-type', 'application/json; charset=UTF-8');
  print json_encode(array('types' => $types, 'surveys' => $surveys));
}

/**
 * Perform the download of a chunk of records, by running a report against the warehouse.
 */
function iform_remote_download_download() {
  if (!iform_remote_download_authenticate()) 
    return;
  global $user;
  $user_obj = entity_metadata_wrapper('user', $user);
  $type = $_POST['type'];
  $report = $type === 'collate-records' ? 'remote_download_by_input_date_using_spatial_index_builder' : 'remote_download';
  $readAuth = report_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  try {
    $location_id = $type==='collate-records' ? $user_obj->field_location_collation->value() : $user_obj->field_location_expertise->value();
  } catch (Exception $e) {
    $location_id = '';
  }
  $options = array(
    'dataSource' => "library/occurrences/$report",
    'readAuth' => $readAuth,
    'extraParams' => array(
      'date_from' => $_POST['date_from'],
      'date_to' => $_POST['date_to'],
      'quality' => '!R',  // todo: parameterise
      'smpattrs' => empty($_POST['smpAttrs']) ? '' : $_POST['smpAttrs'],
      'occattrs' => empty($_POST['occAttrs']) ? '' : $_POST['occAttrs'],
      'searchArea' => '',
      'idlist' => '',
      'ownData' => $type==='my-records' ? 1 : 0,
      'currentUser' => $user_obj->field_indicia_user_id->value(),
      'ownLocality' => $type==='my-records' || empty($location_id) ? 0 : 1,
      'location_id' => $location_id,
      'taxon_groups' => '',
      'ownGroups' => 0,
      'surveys' => empty($_POST['survey_id']) ? '' : $_POST['survey_id'],
      'ownSurveys' => empty($_POST['survey_id']) ? 0 : 1,
    ),
    'sharing' => 'data_flow'    
  );
  if (!empty($_POST['offset']))
    $options['extraParams']['offset'] = $_POST['offset'];
  if (!empty($_POST['limit']))
    $options['extraParams']['limit'] = $_POST['limit'];
  if (!empty($_POST['wantCount']))
    $options['extraParams']['wantCount'] = $_POST['wantCount'];
  $records = report_helper::get_report_data($options);
  drupal_add_http_header('Content-type', 'application/json; charset=UTF-8');
  print json_encode($records);
}

/**
 * Authenticates the download appsecret, usersecret are correct and returns TRUE if OK.
 */
function iform_remote_download_authenticate() {
  $shared_secret = variable_get('iform_mobile_auth_shared_secret',NULL);
  $usersecret = $_POST['usersecret'];
  $appsecret = $_POST['appsecret'];
  $email = $_POST['email'];
  $usersecret_field = 'field_iform_auth_shared_secret';
  // Step 1
  // Verify APP shared secret
  if (empty($appsecret) || trim($appsecret) != trim($shared_secret))
  {
    watchdog('iform RD', 'Missing or incorrect shared app secret');
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request missing or incorrect app secret';
    return FALSE;
  }
  // Step 2.
  // Locate corresponding user
  $existing_user = user_load_by_mail($email);
  if ($existing_user===FALSE) {
    watchdog('iform RD', 'Incorrect email');
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request incorrect email';
    return FALSE;
  }
  $existing_user_obj = entity_metadata_wrapper('user', $existing_user);
  // Step 3.
  // Verify USER shared secret...
  if (empty($usersecret) || trim($usersecret) != trim($existing_user_obj->$usersecret_field->value()))
  {
    watchdog('iform RD', 'User secret incorrect');
    drupal_add_http_header('Status', '400 Bad Request');
    print 'Bad request user secret incorrect';
    return FALSE;
  }
  // Step 4.
  // Check user activation status
  if ($existing_user->status != 1)
  {
    watchdog('iform RD', 'User not activated');
    drupal_add_http_header('Status', '407 Proxy Authentication Required');
    print 'User not activated';
    return;
  }
  watchdog('iform RD', 'Got user '.$existing_user->uid);
  $GLOBALS['user'] = $existing_user;
  return TRUE;
}

/**
 * Menu function that prepares download files for a particular user. Uses the filters associated with the
 * user provided in the uid or indicia_user_id $_GET parameter. Optionally provide a filter_id query
 * to restrict to a single filter.
 */
function iform_remote_download_autogenerate() {
  $indicia_user_id=FALSE;
  if (!empty($_GET['indicia_user_id']))
    $indicia_user_id = $_GET['indicia_user_id'];
  elseif (!empty($_GET['uid'])) {
    // Drupal user ID provided, so load the user and retrieve the profile field for the warehouse user ID.
    $user = user_load($_GET['uid']);
    $field_indicia_user_id = field_get_items('user', $user, 'field_indicia_user_id');
    $indicia_user_id = ($field_indicia_user_id === FALSE) ? 0 : $field_indicia_user_id[0]['value'];
  }
  if (!$indicia_user_id) {
    print 'User not specified';
    return;
  }
  $readAuth = data_entry_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  $filters = report_helper::get_report_data(array(
    'dataSource' => 'library/filters/filters_list',
    'readAuth' => $readAuth,
    'extraParams' => array('filter_sharing_mode' => 'D', 'defines_permissions'=>'', 'filter_user_id' => $indicia_user_id)
  ));
  if (count($filters)===0) {
    print 'No download filters for specified user';
    return;
  }
  $filepath = drupal_realpath(file_default_scheme() . '://') . '/autogenerated_downloads';
  if (!file_prepare_directory($filepath, FILE_CREATE_DIRECTORY)) {
    print "Unable to create directory $filepath";
    return;
  };
  $filepath .= '/user_id_'.$indicia_user_id;
  if (!file_prepare_directory($filepath, FILE_CREATE_DIRECTORY)) {
    print "Unable to create directory $filepath";
    return;
  };
  foreach ($filters as $filter) {
    // Allow a filter_id parameter to restrict to a single filter.
    if (empty($_GET['filter_id']) || $_GET['filter_id']==$filter['id']) {
      $def = json_decode($filter['definition'], TRUE);
      $options = array(
        'report' => variable_get('iform_default_download_report', 'library/occurrences/filterable_occurrences_download.xml'),
        'reportSource' => 'local',
        'nonce' => $readAuth['nonce'],
        'auth_token' => $readAuth['auth_token'],
        'occattrs'=>variable_get('iform_default_download_smpattrs', '#biotope'), 
        'smpattrs'=>variable_get('iform_default_download_occattrs', '#det_full_name,#sex,#stage,#sex_stage_count'), 
        'sharing'=>'data_flow', 
        'mode'=>variable_get('iform_default_download_format', 'csv')
      ) + $def;
      $output = report_helper::http_post(report_helper::$base_url.'index.php/services/report/requestReport?'.report_helper::array_to_query_string($options, true));
      if (!$output['result'])
        return;
      if (count($output)===0) {
        print 'No output';
        return;
      }
      $ext = ($options['mode']==='nbn' || $options['mode']==='tsv') ? 'txt' : $options['mode'];
      $filename = 'download-'.preg_replace('/[^a-zA-Z0-9 \-_]/', '', $filter['title']);
      $fp = fopen("$filepath/$filename.$ext", 'w');
      if (!$fp) {
        print "Could not open file for writing at $filepath/$filename.$ext";
        return;
      }
      fwrite($fp, $output['output']);
      fclose($fp);
      print "Created $filepath/$filename.$ext<br/>";
    }
  }
  // clear the message queue from folder creation events
  drupal_get_messages();
}

/**
 * Implement hook_variable_info.
 * Returns information about the variables used by this module, allowing an admin interface
 * to be created. We use a couple of custom extensions to allow these to be added to the Indicia
 * settings page.
 */
function iform_remote_download_variable_info($options) {
  $variable['iform_default_download_report']=array(
    'title'=>t('Default autogenerated download report'),
    'description'=>t('The report file used for autogenerated downloads. See http://indicia-docs.readthedocs.org/en/latest/site-building/moving-data-around/autogenerate-downloads.html.'),
    'type'=>'string',
    'default'=>'library/occurrences/filterable_occurrences_download.xml',
    'addToIndiciaSettingsPage'=>true
  );
  $variable['iform_default_download_format']=array(
    'title'=>t('Autogenerated download format'),
    'description'=>t('Format for autogenerated download files. Defaults to csv but can be changed to tsv, nbn, xml or any format supported '.
        'by the report web service\'s mode parameter.'),
    'type'=>'string',
    'default'=>'csv',
    'addToIndiciaSettingsPage'=>true
  );
  $variable['iform_default_download_smpattrs']=array(
    'title'=>t('Default autogenerated download sample attributes'),
    'description'=>t('Comma separate list of sample attribute IDs or #systemfunctions to include in autogenerated downloads.'),
    'type'=>'string',
    'default'=>'#biotope',
    'addToIndiciaSettingsPage'=>true
  );
  $variable['iform_default_download_occattrs']=array(
    'title'=>t('Default autogenerated download occurrence attributes'),
    'description'=>t('Comma separate list of occurrence attribute IDs or #systemfunctions to include in autogenerated downloads.'),
    'type'=>'string',
    'default'=>'#det_full_name,#sex,#stage,#sex_stage_count',
    'addToIndiciaSettingsPage'=>true
  );
  return $variable;
}