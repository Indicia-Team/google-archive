<?php
/**
 * @file
 * Defines a formatter for the taxon formatters module that can display NBN
 * Gateway maps.
 */

/**
 * Implements hook_taxon_formatter_types().
*/
function nbn_map_taxon_formatter_types() {
  $formatter = array(
    'nbn_map' => array(
      'title' => t('NBN Map'),
      // Field type is tvk, tlick or brc (+GBIF?).
      'field_type' => 'tvk',
      // Function that generates the form using Forms API, with arguments for
      // the current settings values, type name (e.g. nbn_map) and optional
      // $args.
      'form_callback' => 'nbn_map_taxon_formatter_settings_form',
      // Can be used to pass arguments to the form.
      'form_args' => array(),
    ),
  );
  return $formatter;
}

/**
 * This defines the drupal form used for the settings of this formatter type.
 */
function nbn_map_taxon_formatter_settings_form($settings, $type, $args) {
  if ($type == 'nbn_map') {
    // Apply some defaults.
    $settings = array_merge(array(
      'width' => 270,
      'height' => 390,
      'cache_life' => 7,
    ), $settings);
    $form = array();
    // @todo validate width and height.
    $form['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width (px)'),
      '#description' => t('Width of the map in pixels.'),
      '#required' => TRUE,
      '#default_value' => $settings['width'],
    );
    $form['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height (px)'),
      '#description' => t('Height of the map in pixels. Use a ratio of 13:9 to make the grid square.'),
      '#required' => TRUE,
      '#default_value' => $settings['height'],
    );
    $form['caching'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable caching'),
      '#description' => t('Cache images locally in the Drupal files folder for better performance.'),
      '#default_value' => $settings['caching'],
    );
    // @todo validate cache_life.
    $form['cache_life'] = array(
      '#type' => 'textfield',
      '#title' => t('Cache lifetime (days)'),
      '#description' => t('Number of days to keep cached maps. A clear cache command will also cause maps to be requested anew.'),
      '#default_value' => $settings['cache_life'],
    );
    $form['datasets'] = array(
      '#type' => 'textarea',
      '#title' => t('Datasets'),
      '#description' => t('List the keys of the datasets to restrict the query to one per line, or leave blank for no dataset filter.'),
      '#required' => FALSE,
      '#default_value' => $settings['datasets'],
      '#wysiwyg' => FALSE,
    );
    $form['bands'] = array(
      '#type' => 'textarea',
      '#title' => t('Display Bands'),
      '#description' => t('List display bands one per line to define the fill and border colour of the output by date range, or leave blank for just the default band. '.
          'Each band line consists of a comma separated list of the settings (from, to, fill and border). The from and to values are 4 digit years, the fill and border '.
          'values are RGB colour codes. For example "from=1980,to=1990,fill=FF0000,border=000000". The first in the list is the bottom layer.'),
      '#required' => FALSE,
      '#default_value' => $settings['bands'],
      '#wysiwyg' => FALSE,
    );
//    $form['region'] = array(
//      '#type' => 'select',
//      '#title' => t('Region'),
//      '#description' => t('Select the region to be displayed for the map.'),
//      '#required' => TRUE,
//      '#options' => array(
//        'GBIreland'=>'Displays Britain and Irish coastline and records',
//        'Ireland'=>'Zooms the map to Ireland, only Irish records display',
//        'GB'=>'Display the British coastline only. Any Irish records will still display.'       
//      ),
//      '#default_value' => $settings['region']
//    );
//    $form['vice_county'] = array(
//      '#type' => 'textfield',
//      '#title' => t('Vice County Number'),
//      '#description' => t('Select a vice county number to zoom the map to, or leave blank. This only zooms the map, it does not filter the records. '.
//          'The region setting above must be correct or the vice county number is ignored.'),
//      '#required' => FALSE,
//      '#default_value' => $settings['vice_county']
//    );
    $form['resolution'] = array(
      '#type' => 'select',
      '#title' => t('Resolution'),
      '#description' => t('Displayed square size for distribution points.'),
      '#required' => TRUE,
      '#options' => array(
        '10km' => '10km',
        '2km' => '2km',
      ),
      '#default_value' => $settings['resolution'],
    );
    $form['background'] = array(
      '#type' => 'select',
      '#title' => t('Background'),
      '#description' => t('Select the background layer to display.'),
      '#required' => TRUE,
      '#options' => array(
        'None' => 'Outline only',
        'OSMap' => 'Ordnance Survey map',
        'ViceCounty' => 'Watsonian vice county boundaries.',
      ),
      '#default_value' => $settings['background'],
    );
  }
  return $form;
}

/**
 * Implements the output theme function.
 */
function theme_nbn_map_taxon_formatter_output($params) {
  $item = $params['item'];
  $preset = $params['preset'];
  // Return nothing if no TVK.
  $tvk = trim($item['value']);
  if (empty($tvk)) {
    return '';
  }

  if ($preset['settings']['caching']) {
    // We are using caching.
    // Locate file cache.
    $dir = drupal_realpath('public://nbn_maps');
    if (!file_exists($dir)) {
      mkdir($dir, 0777);
    }
    $file_name = "$tvk-" . $preset['presetid'] . '.png';
    $file_path = $dir . "/" . $file_name;
    // Get preferred tvk from cache.
    $ptvk = cache_get("nbn_map:$tvk");
    // Calculate life span of files.
    $cache_life = isset($preset['settings']['caching']) ? $preset['settings']['caching'] : 7;
    $cache_life = $cache_life * 24 * 60 * 60;

    if (!file_exists($file_path) || !$ptvk || 
            (filemtime($file_path) < time() - $cache_life)) {
      // Cached information is not available so get it.      
      try {
      // Get the preferred tvk as a non-preferred one may return an empty map.
        $ptvk = nbn_map_get_ptvk($tvk);
        cache_set("nbn_map:$tvk", $ptvk);

        // Get the file in to the cache.
        $query = nbn_map_build_query($ptvk, $preset);
        $remote_image = file_get_contents($query);
        if($remote_image === FALSE) {
          throw new Exception('Failed trying to get image from NBN Servers');
        }
        $local_image  = fopen($file_path, 'w+');
        if ($local_image === FALSE) {
          throw new Exception('Problem creating the cache file');
        }
        $written = fwrite($local_image, $remote_image);
        if ($written === FALSE) {
          throw new Exception('Problem writing the cache file');
        }
        fclose($local_image);    
        unset($remote_image);
      }
      catch(Exception $e) {
        watchdog("nbn_map", $e->getMessage());
        return t('Sorry. There was a problem getting the distribution map from the National Biodiversity Network. Please try again later.');
      }
    }
    
    // Create a url to the cached image.
    $url = file_create_url('public://nbn_maps/' . $file_name);
  }
  else {
    // We are not caching images.
    try {
      $ptvk = nbn_map_get_ptvk($tvk);
    }
    catch(Exception $e) {
      return $e->getMessage();
    }
    $url = nbn_map_build_query($ptvk, $preset);
  }
  
  $args = array(
    'image_path' => $url,
    'preset' => $preset);
  return theme('nbn_map_output', $args);
}

/**
 * Theme function that creates the final map output with NBN attribution.
 */
function theme_nbn_map_output($args) {
  $image_path = $args['image_path'];
  $preset = $args['preset'];
  $result = '<div style="width: '.$preset['settings']['width'].'px; margin: 0 auto;">'
          . '<img src="'. $image_path .'" width="'.$preset['settings']['width'].'" height="'.$preset['settings']['height'].'" />';
  $result .= '<table width="100%">'.
      '<tbody><tr><td align="left"><a href="https://data.nbn.org.uk/Terms">'.
      t('Gateway terms and conditions').'</a></td><td align="right"><a href="http://data.nbn.org.uk">'.
      '<img src="https://data.nbn.org.uk//images/NBNPower.gif" border="0"></a></td></tr></tbody></table></div>';
  return $result;  
}

/**
 * Implements hook_theme().
 */
function nbn_map_theme() {
  $theme = array();
  $theme["nbn_map_taxon_formatter_output"] = array(
      'arguments' => array('element' => NULL),
  );
  $theme["nbn_map_output"] = array(
      'arguments' => array('element' => NULL),
  );
  return $theme;
}

/**
 * Internal method to get the preferred tvk.
 */
function nbn_map_get_ptvk($tvk) {
  $url = "https://data.nbn.org.uk/api/taxa/$tvk";
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  // Avoid ssl errors. There is no need for encryption.
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER , FALSE);
  $json = curl_exec($ch);
  if($json === FALSE) {
    throw new Exception(t('Failed trying to talk to NBN Servers. Error: @error', 
            array('@error' => curl_error($ch))));
  }
  curl_close($ch);
  $taxon = json_decode($json);
  $tvk = $taxon->ptaxonVersionKey;
  return $tvk;
}

/**
 * Internal method to create the url required for a web service request.
 */
function nbn_map_build_query($tvk, $preset) {
  $url = "https://gis.nbn.org.uk/SingleSpecies/$tvk?";
  $query = 'abundance=presence'
          . '&FORMAT=image/png'
          . '&TRANSPARENT=TRUE'
          . '&SERVICE=WMS'
          . '&VERSION=1.1.1'
          . '&REQUEST=GetMap'
          . '&SRS=EPSG:27700'
          . '&BBOX=-200000,-20000,700000,1280000';
  $query .= '&WIDTH=' . $preset['settings']['width'];
  $query .= '&HEIGHT=' . $preset['settings']['height'];

  $layers = array('GB-Coast', 'Ireland-Coast');

  // Resolution. Only 10km and 2km options offered.
  if($preset['settings']['resolution'] == '2km') {
    $resolution = 'Grid-2km';  
  }
  else {
    $resolution = 'Grid-10km';  
  }
  
  // Background. OSMap or ViceCounty.
  // Omit for none
  if($preset['settings']['background'] == 'OSMap') {
    $layers[] = 'OS-Scale-Dependent';  
  }
  else if($preset['settings']['background'] == 'ViceCounty') {
    $layers[] = 'Vice-counties';  
  }

  // Datasets.
  if (!empty($preset['settings']['datasets'])) {    
    // split the dataset definitions up by line, allowing for different line
    // endings.
    $datasets = str_replace("\r\n", "\n", $preset['settings']['datasets']);
    $datasets = str_replace("\r", "\n", $datasets);
    $datasets = explode("\n", $datasets);
    if (count($datasets) > 0) {      
      // clean the dataset keys
      foreach($datasets as &$dataset) {     
        $dataset = preg_replace("[^A-Z0-9]", "", $dataset);
      }
      $query .= '&datasets=' . implode(',', $datasets);
    }
  }
  
  // Date bands.
  $this_year = date('Y');
  if (!empty($preset['settings']['bands'])) {
    // split the band definitions up by line, allowing for different line
    // endings.
    $bands = str_replace("\r\n", "\n", $preset['settings']['bands']);
    $bands = str_replace("\r", "\n", $bands);
    $bands = explode("\n", $bands);    
    if (count($bands) > 0) {
      $band_number = 0;
      foreach($bands as $band) {
        // Default is from the beginning to present, red fill, black border.
        $from = '0001';
        $to = $this_year;
        $fill = 'FF0000';
        $border = '000000';
        
        // Split each definition up into the separate properties.
        $properties = explode(',', $band);
        foreach ($properties as $property) {  
          // Split the property definition into a key value pair.
          $key_value = explode('=', $property);          
          // Some validation.
          if (count($key_value) != 2) {
            // Not a pair.
            continue;
          }
          if (trim($key_value[0]) == 'from') {
            $from = preg_replace("[^0-9]", "", $key_value[1]);
          }
          else if (trim($key_value[0]) == 'to') {
            $to = preg_replace("[^0-9]", "", $key_value[1]);
          }
          else if (trim($key_value[0]) == 'fill') {
            $fill = preg_replace("[^A-F0-9]", "", $key_value[1]);
          }
          else if (trim($key_value[0]) == 'border') {
            $border = preg_replace("[^A-F0-9]", "", $key_value[1]);
          }
        } // Foreach property.
        
        // Add band to query.
        $query .= '&band=' . $from . '-' . $to . ',' . $fill . ',' . $border;
        
        // Add resolution layer for each band.
        $layers[] = $resolution . '_Band_' . $band_number;
        $band_number++;
      } // Foreach band.
    }
  }

  if (empty($preset['settings']['bands']) || count($bands) == 0) {
     // Add default band.
     $query .= '&band=0001-' . $this_year . ',FF0000,000000';
     // Add default resolution layer.
     $layers[] = $resolution . '_Band_0'; 
  }

  
  
  // Layers.
  $query .= '&LAYERS=' . implode(',', $layers);

  return $url . $query;
}
