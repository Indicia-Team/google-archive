<?php
/**
 * @file
 * Defines a formatter that can display output from various taxonomic
 * webservices based on the content of an underlying taxon identifier field.
 */

/**
 * Preset storage constant for user-defined presets in the DB.
 */
define('TAXON_FORMATTERS_STORAGE_NORMAL', 0);

/**
 * Preset storage constant for module-defined presets in code.
 */
define('TAXON_FORMATTERS_STORAGE_DEFAULT', 1);

/**
 * Preset storage constant for user-defined presets that override module-defined
 * presets.
 */
define('TAXON_FORMATTERS_STORAGE_OVERRIDE', 2);

/**
 * Implements hook_menu().
 * 
 * @todo setup access arguments
 */
function taxon_formatters_menu() {
  $items = array();
  $items['admin/config/content/taxon_formatters'] = array(
    'title' => 'Taxon formats',
    'file' => 'taxon_formatters.pages.inc',
    'description' => 'Administer taxon formatter presets and actions.',
    'page callback' => 'taxon_formatters_preset_overview',
    'access arguments' => array('administer taxon_formatters'),
  );
  $items['admin/config/content/taxon_formatters/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/content/taxon_formatters/add'] = array(
    'title' => 'Add taxon format',
    'file' => 'taxon_formatters.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxon_formatters_preset_form'),
    'access arguments' => array('administer taxon_formatters'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/taxon_formatters/%taxon_formatters_preset'] = array(
    'title callback' => 'taxon_formatter_preset_title_callback',
    'title arguments' => array('Edit format: !presetname', 4),
    'file' => 'taxon_formatters.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxon_formatters_preset_form', 4),
    'access arguments' => array('administer taxon_formatters'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/content/taxon_formatters/%taxon_formatters_preset/delete'] = array(
    'title callback' => 'taxon_formatter_preset_title_callback',
    'title arguments' => array('Delete format: !presetname', 4),
    'file' => 'taxon_formatters.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxon_formatters_preset_delete_form', 4),
    'access arguments' => array('administer taxon_formatters'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Get an array of all presets and their settings.
 *
 * @param bool $reset
 *   if set to TRUE it will clear the preset cache
 *
 * @return array
 *   array(
 *     $preset_id => array(
 *       'presetid' => integer, 
 *       'presetname' => string, 
 *       'type' => string
 *     )
 *   )
 */
function taxon_formatters_presets($reset = FALSE) {
  static $presets = array();

  // Clear  caches if $reset is TRUE.
  if ($reset) {
    $presets = array();
    cache_clear_all('taxon_formatters:presets', 'cache');

    // TODO update for D7
    // Clear the content.module cache (refreshes the list of formatters provided
    // by taxon_formatters.module).
    //    if (module_exists('content')) {
    //      content_clear_type_cache();
    //    }
  }
  // Return presets if the array is populated.
  if (!empty($presets)) {
    return $presets;
  }

  // Grab from cache or build the array.
  if (($cache = cache_get('taxon_formatters:presets', 'cache'))) {
    $presets = $cache->data;
  }
  else {
    $normal_presets = array();

    $result = db_query('SELECT * FROM {taxon_formatters_preset} ORDER BY presetname');
    while ($preset = $result->fetchAssoc()) {
      $preset['storage'] = TAXON_FORMATTERS_STORAGE_NORMAL;
      $presets[$preset['presetid']] = $preset;
      // Collect normal preset names so we can skip defaults and mark overrides
      // accordingly.
      $normal_presets[$preset['presetname']] = $preset['presetid'];
    }

    // Collect default presets and allow modules to modify them before they
    // are cached.
    $default_presets = module_invoke_all('taxon_identifiers_default_presets');
    drupal_alter('taxon_identifiers_default_presets', $default_presets);

    // Add in default presets if they don't conflict with any normal presets.
    // Mark normal presets that take the same preset namespace as overrides.
    foreach ($default_presets as $preset) {
      if (!empty($preset['presetname'])) {
        if (!isset($normal_presets[$preset['presetname']])) {
          $preset['storage'] = TAXON_FORMATTERS_STORAGE_DEFAULT;
          // Use a string preset identifier.
          $preset['presetid'] = $preset['presetname'];
          $presets[$preset['presetname']] = $preset;
        }
        else {
          $presetid = $normal_presets[$preset['presetname']];
          $presets[$presetid]['storage'] = TAXON_FORMATTERS_STORAGE_OVERRIDE;
        }
      }
    }

    cache_set('taxon_formatters:presets', $presets);
  }
  return $presets;
}

/**
 * Gets a list of taxon formatter types.
 */
function taxon_formatter_types($reset = FALSE) {
  static $types = array();
  if ($reset) {
    $types = array();
    cache_clear_all('taxon_formatters:types', 'cache');
  }
  // Return presets if the array is populated.
  if (!empty($presets)) {
    return $presets;
  }
  // Grab from cache or build the array.
  if (($cache = cache_get('taxon_formatters:types', 'cache'))) {
    $types = $cache->data;
  }
  else {
    $types = module_invoke_all('taxon_formatter_types');
  }
  return $types;
}

/**
 * Returns a list of taxon formatters available, as exposed by other modules.
 */
function taxon_formatters_formatters() {
  return module_invoke_all('taxon_formatter');
}

/**
 * The AJAX callback function.
 * 
 * Sends back the formatter params when the formatter type is changed. 
 */
function get_settings_js($form, &$form_state) {
  return $form['taxon_formatter_params'];
}

/**
 * Menu wildcard loader.
 */
function taxon_formatters_preset_load($preset_id) {
  return taxon_formatters_preset($preset_id, TRUE);
}

/**
 * Load a preset by preset_id.
 *
 * @param int $preset_id
 *   The numeric id of a preset.
 * @param bool $reset
 *   if set to TRUE it will clear the preset cache.
 *
 * @return array
 *   preset array( 'presetname' => string, 'presetid' => integet)
 *   empty array if preset_id is an invalid preset
 */
function taxon_formatters_preset($preset_id, $reset = FALSE) {
  $presets = taxon_formatters_presets($reset);
  return (isset($presets[$preset_id])) ? $presets[$preset_id] : array();
}

/**
 * Creates a title for an action on a preset.
 * 
 * @param string $title
 *   A title template which may contain replacement patterns.
 * @param array $preset
 *   Details of a preset.
 * @param array $action
 *   Details on an action.
 * 
 * @return string
 *   The title with replacements.
 */
function taxon_formatter_preset_title_callback($title, $preset = array(), $action = array()) {
  $replacements = array();
  if (!empty($preset)) {
    $replacements['!presetname'] = $preset['presetname'];
    $replacements['!presetid'] = $preset['presetid'];
  }
  if (!empty($action) && !is_array($action)) {
    $replacements['!actionname'] = $action;
  }
  elseif (!empty($action)) {
    $replacements['!action'] = $action['action'];
  }
  return t($title, $replacements);
}

/**
 * Deletes a preset.
 * 
 * @param array $preset
 *   Details of a $preset.
 * 
 * @return bool
 *   Always returns TRUE.
 */
function taxon_formatters_preset_delete($preset) {
  db_delete('taxon_formatters_preset')
    ->condition('presetid', $preset['presetid'])
    ->execute();
  taxon_formatters_presets(TRUE);
  return TRUE;
}

/**
 * Implements hook_field_formatter_info().
 */
function taxon_formatters_field_formatter_info() {
  $format_types = taxon_formatter_types();
  $formatters = array();
  foreach (taxon_formatters_presets() as $presetid => $preset) {
    $formatters['tf_' . $presetid] = array(
      'label' => t($preset['presetname']),
      'field types' => array($format_types[$preset['type']]['field_type']),
    );
  }
  return $formatters;
}



/**
 * Implements hook_field_formatter_view().
 */
function taxon_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  // Extract the presetid from the field display type.
  $presetid = substr($display['type'], 3);
  // Load the preset.
  $presets = taxon_formatters_presets();
  $preset = $presets[$presetid];
  // Convert the settings json into a readable array.
  $preset['settings'] = json_decode($preset['settings'], TRUE);
  // Determine the theme function to call.
  $func = $preset['type'] . '_taxon_formatter_output';
  foreach ($items as $delta => $item) {
    // Generate the output.
    $markup = theme($func, array('item' => $item, 'preset' => $preset));
    $element[$delta] = array('#markup' => $markup);
  }
  return $element;
}
