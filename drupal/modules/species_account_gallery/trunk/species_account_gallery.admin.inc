<?php// $Id$/** * Menu callback for the configuration form */function species_account_gallery_settings_form() {  $form = array();  $vocabs = taxonomy_get_vocabularies();  $vocabArr = array();  foreach ($vocabs as $vocab) {    $vocabArr[$vocab->vid] = $vocab->name;  }  $form['sag_vid'] = array(    '#type' => 'select',    '#title' => t('Taxonomy Vocabulary'),    '#description' => t('Select the name of the vocabulary to be used to build the taxonomic '.        'hierarchy associated with the imported species accounts'),    '#options' => $vocabArr,    '#default_value' =>  sag_get_vid()  );  $form['sag_gallery_mode'] = array(    '#type' => 'select',    '#title' => t('Image Gallery Plugin'),    '#description' => t('Select the JavaScript library to use for displaying popup image overlays.'),    '#options' => sag_get_gallery_modules(),    '#default_value' => variable_get('sag_gallery_mode', 'fancybox')  );  $form['sag_max_image_weight'] = array(    '#type' => 'textfield',    '#title' => t('Max Image Weight'),    '#description' => t('Maximum weight value for the list of images displayed for each species. '.        'Leave blank for no limit.'),    '#default_value' => variable_get('sag_max_image_weight', '')  );  $form['sag_max_image_count'] = array(    '#type' => 'textfield',    '#title' => t('Max Image Count'),    '#description' => t('Maximum total count of images for the list of images displayed for each species. '.        'Leave blank for no limit.'),    '#default_value' => variable_get('sag_max_image_count', '')  );  $form['sag_ranks_combine'] = array(    '#type' => 'textarea',    '#title' => t('Ranks to combine'),    '#description' => t('Groups of ranks that should be combined into single headings. Each group should be on a separate line. The taxon '.        'rank name should be wrapped in braces to use as a replacement token, t.g. "{Family} > {Subfamily}" would result in a heading '.        'such as "Vespidae > Vespinae". Alternatively "Family: {Family}; Subfamily: {Subfamily}" would result in a heading such as '.        '"Family: Vespidae; Subfamily: Vespinae". If any parts of the pattern are optional ranks in the hierarchy, wrap the respective part in '.        'square brackets. For example, "{Family}[ > {Subfamily}]" would output either Vespidae > Vespinae or just Vespidae when the '.        'subfamily is missing.'),    '#default_value' => variable_get('sag_ranks_combine', ''),    '#wysiwyg' => false  );  $form['sag_hide_ranks'] = array(    '#type' => 'textfield',    '#title' => t('Hide Ranks'),    '#description' => t('Comma separated list of rank names which are hidden in the hierarchy. All children are '.        'combined into the single parent.'),    '#default_value' => variable_get('sag_hide_ranks', '')  );  $form['sag_page_break_ranks'] = array(    '#type' => 'textfield',    '#title' => t('Break to child page after ranks'),    '#description' => t('Comma separated list of rank names which when clicked will navigate to a new page for the child information rather '.        'than continue displaying the child levels in the tree. For example, a higher taxonomy could be split after the family node '.        'to diplsay a child page specific to the content of each family. If you tag a node with the family (or other rank) then it will '.        'be used to display summary information above the list of children for the rank.'),    '#default_value' => variable_get('sag_page_break_ranks', '')  );  $form['sag_load_mode'] = array(    '#type' => 'select',    '#title' => t('Loading mode'),    '#description' => t('Choose whether to load the complete tree, or only load tree levels as the parent is expanded by the user. '.        'For larger trees select the latter option for better overall performance.'),    '#options' => array(      'full' => 'Load complete tree',      'ajax' => 'Load tree levels as required using JavaScript'    ),    '#default_value' => variable_get('sag_load_mode', 'full')  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save settings')      );   return $form;}/** * Validate method for the config form. */function species_account_gallery_settings_form_validate($form, &$form_state) {}/** * Submit method for the config form. */function species_account_gallery_settings_form_submit($form, &$form_state) {  variable_set('sag_vid', $form_state['values']['sag_vid']);  variable_set('sag_gallery_mode', $form_state['values']['sag_gallery_mode']);  variable_set('sag_max_image_weight', $form_state['values']['sag_max_image_weight']);  variable_set('sag_max_image_count', $form_state['values']['sag_max_image_count']);  variable_set('sag_load_on_demand', $form_state['values']['sag_load_on_demand']);  variable_set('sag_ranks_combine', $form_state['values']['sag_ranks_combine']);  variable_set('sag_hide_ranks', $form_state['values']['sag_hide_ranks']);  variable_set('sag_page_break_ranks', $form_state['values']['sag_page_break_ranks']);  variable_set('sag_load_mode', $form_state['values']['sag_load_mode']);  drupal_set_message(t('Settings saved.'));}/** * Function to retrieve a list of available gallery modules, which depends on installed Drupal modules. */function sag_get_gallery_modules() {  // fancybox can be provided by iform module  if (module_exists('iform'))    $r['fancybox']=t('Fancybox');  if (module_exists('highslide'))    $r['highslide']=t('Highslide');  return $r;}