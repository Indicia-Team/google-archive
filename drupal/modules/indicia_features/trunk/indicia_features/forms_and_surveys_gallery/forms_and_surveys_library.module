<?php

function forms_and_surveys_library_menu() {
  $items['forms_and_surveys_library'] = array(
    'title' => 'My Forms',
    'description' => 'A library of available input forms to use and surveys to participate in.',
    'file'=>'forms_and_surveys_library.pages.inc',
    'page callback' => 'library_view',
    'access arguments' => array('online recording'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['forms_and_surveys_library/set_favourite'] = array(
    'page callback'=>'forms_and_surveys_library_set_favourite',
    'access arguments' => array('access iform'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function forms_and_surveys_library_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && $form['type']['#value']==='iform' && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    iform_load_helpers(array('data_entry_helper'));
    $readAuth = data_entry_helper::get_read_auth(variable_get('indicia_website_id', 0), variable_get('indicia_password', ''));
    $libEntry = db_fetch_array(db_query('select * from {forms_and_surveys_library} where nid=%d', $form['#node']->nid));
    if ($libEntry) {
      $include=true;
      $locations = empty($libEntry['location_ids']) ? array() : unserialize($libEntry['location_ids']);
      $taxon_groups = empty($libEntry['taxon_group_ids']) ? array() : unserialize($libEntry['taxon_group_ids']);
    } else {
      $include=false; 
      $locations = array();
      $taxon_groups=array();
    }
    // load the location names as at the moment we only have the keys
    if (!empty($locations)) {
      $qry = json_encode(array('in'=>array('id', $locations)));
      $result = data_entry_helper::get_population_data(array(
        'table' => 'location',
        'extraParams'=>$readAuth + array('query'=>$qry)
      ));
      // convert result array to correct format for sub_list control
      $locations = array();
      foreach($result as $row)
        $locations[$row['id']]=$row['name'];
    }
    // load the taxon group titles names as at the moment we only have the keys
    if (!empty($taxon_groups)) {
      $qry = json_encode(array('in'=>array('id', $taxon_groups)));
      $result = data_entry_helper::get_population_data(array(
        'table' => 'taxon_group',
        'extraParams'=>$readAuth + array('query'=>$qry)
      ));
      // convert result array to correct format for sub_list control
      $taxon_groups = array();
      foreach($result as $row)
        $taxon_groups[$row['id']]=$row['title'];
    }
    $title = $row ? $libEntry['library_title'] : $form['#node']->title;
    $description = $libEntry ? $libEntry['library_description'] : ''  ;
    $form['library_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Forms and surveys library settings'),
      '#collapsible' => true,
      '#collapsed' => !$include,
      '#access' => user_access('create iform'),
      '#weight' => 30,
    );
    $form['library_settings']['include_in_library'] = array(
      '#title' => t('Include in library'),
      '#type' => 'checkbox',
      '#default_value' => $include ? 1 : 0,
      '#description' => t('Tick this box to add the form to the forms and surveys library page.'),
    );
    $form['library_settings']['included'] = array(
      '#type' => 'fieldset'
    );
    $form['library_settings']['included']['library_title'] = array(
      '#title' => t('Library title'),
      '#type' => 'textfield',
      '#default_value' => $title,
      '#description' => t('Title of the form as it appears in the library browser.'),
    );
    $form['library_settings']['included']['library_description'] = array(
      '#title' => t('Library description'),
      '#type' => 'textarea',
      '#default_value' => $description,
      '#description' => t('Description of the form as it appears in the library browser.'),
    );
    $form['library_settings']['included']['locations'] = array(
      '#value' => data_entry_helper::sub_list(array(
        'label' => t('Locations'), 
        'fieldname'=>'locations',
        'table'=>'location',
        'valueField'=>'id',
        'captionField'=>'name',
        'extraParams' => $readAuth,
        'default'=>$locations,
        'class'=>'control-width-5'
      ))
    );
    $form['library_settings']['included']['taxon_groups'] = array(
      '#value' => data_entry_helper::sub_list(array(
        'label' => t('Species groups'), 
        'fieldname'=>'taxon_groups',
        'table'=>'taxon_group',
        'valueField'=>'id',
        'captionField'=>'title',
        'extraParams' => $readAuth,
        'default'=>$taxon_groups,
        'class'=>'control-width-5'
      ))
    );
    data_entry_helper::$javascript .= "
function set_include() {
  var ctrls=$('#edit-library-title-wrapper').parent('fieldset');
  if ($('#edit-include-in-library').is(':checked')) {
    ctrls.show();
  } else {
    ctrls.hide();
  }
}
$('#edit-include-in-library').bind('click', set_include);
set_include();\n";
    handle_resources();
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * Allows library info to be specified at node edit time rather
 * than through the administrative interface.
 */
function forms_and_surveys_library_nodeapi(&$node, $op, $arg) {
  // Permissions are required for everything except node loading.
  if (user_access('create iform') || ($op == 'load')) {
    switch ($op) {
      //case 'load': -- not implemented as not needed, since it causes extra db hits when nodes are loaded

      case 'insert':
      case 'update':
        if ($node->include_in_library) {
          // Have to use $_POST as Drupal does not seem to pickup the output of the sub_list control.
          // Work out if there is an existing record. db_write_record can then do an insert or update.
          $exist = db_fetch_object(db_query('select nid from {forms_and_surveys_library} where nid=%d', $node->nid));
          $key = $exist ? 'nid' : array();
          
          $record = array(
            'nid'=>$node->nid,
            'location_ids'=>array_key_exists('locations', $_POST) ? serialize($_POST['locations']) : null,
            'taxon_group_ids'=>array_key_exists('taxon_groups', $_POST) ? serialize($_POST['taxon_groups']) : null,
            'library_title'=>$node->library_title,
            'library_description'=>$node->library_description
          );
          drupal_write_record('forms_and_surveys_library', $record, $key);
        } else {
          _forms_and_surveys_library_delete($node->nid);
        }
        
        break;

      case 'delete':
        // delete from forms_and_surveys_library where nid=$node->nid;
        _forms_and_surveys_library_delete($node->nid);
        break;
    }
  }
}

/**
 * Delete a form from the library.
 * @param type $nid Node ID
 */
function _forms_and_surveys_library_delete($nid) {
  drupal_set_message('deleted '.$nid);
  db_query('delete from {forms_and_surveys_library} where nid=%d', $nid);
}

/**
 * Ajax method for setting whether a particular form is in the list of forms associated with the current user.
 */
function forms_and_surveys_library_set_favourite() {
  global $user;
  profile_load_profile($user);
  $forms = empty($user->profile_favourite_library_forms) ? array() : unserialize($user->profile_favourite_library_forms);
  if ($_GET['favourite']==='1') {
    if (!in_array($_GET['nid'], $forms)) 
      $forms[] = $_GET['nid'];
  } else
    // remove the form from the array
    $forms = array_diff($forms, array($_GET['nid']));
  $edit = array('profile_favourite_library_forms'=>serialize($forms));
  profile_save_profile($edit, $user, 'System');
  // force a menu rebuild
  cache_clear_all('fsl-menu-'.$user->uid, 'cache');
  // must do this now, because if we leave it till later the $user object has the out of date forms list when it reloads (presumably a cache issue)
  forms_and_surveys_submenu($forms);
  return 'Ok';
}

/**
 @todo
 Put favourite items on the menu using theme_links.
 Add a registration url and registration message to the schema for forms and surveys library table.
 Use hook menu to catch the registration urls. Redirect to the user/register page (access anonymous users only), with ?form=nid in url.
 Use hook_user to catch register and add message to the top.
 Use hook_user to catch submit of registration, and auto-add the appropriate form to the user's faves in their profile.
*/ 
function forms_and_surveys_library_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'register':
      if ($_GET['form'])
        drupal_set_message('You are registering for form '.$_GET['form']);
  }  
}

/**
 * Modify the forms registry so that the nice menus output is controlled by this module. This let us splice in user's forms. 
 */
function forms_and_surveys_library_theme_registry_alter(&$theme_registry) {
  if (module_exists('nice_menus') && !empty($theme_registry['nice_menus_build'])) {  
    $theme_registry['nice_menus_build']['function'] = 'forms_and_surveys_library_menu_build';
  }
}

/** 
 * Build the nice menu output, inserting our fave forms in the My Forms menu item.
 * @todo: Caching
 * @todo: Clear the nice menu cache when the user saves a fave.
 * @todo: Make the menu item configurable.
 */
function forms_and_surveys_library_menu_build($menu, $depth = -1, $trail = NULL) {
  $output = '';
  // Prepare to count the links so we can mark first, last, odd and even.
  $index = 0;
  $count = 0;
  foreach ($menu as $menu_count) {
    if ($menu_count['link']['hidden'] == 0) {
      $count++;
    }
  }
  // Get to building the menu.
  foreach ($menu as $menu_item) {
    $mlid = $menu_item['link']['mlid'];
    // Check to see if it is a visible menu item.
    if (!isset($menu_item['link']['hidden']) || $menu_item['link']['hidden'] == 0) {
      // Check our count and build first, last, odd/even classes.
      $index++;
      $first_class = $index == 1 ? ' first ' : '';
      $oddeven_class = $index % 2 == 0 ? ' even ' : ' odd ';
      $last_class = $index == $count ? ' last ' : '';
      // Build class name based on menu path
      // e.g. to give each menu item individual style.
      // Strip funny symbols.
      $clean_path = str_replace(array('http://', 'www', '<', '>', '&', '=', '?', ':', '.'), '', $menu_item['link']['href']);
      // Convert slashes to dashes.
      $clean_path = str_replace('/', '-', $clean_path);
      $class = 'menu-path-'. $clean_path;
      if ($trail && in_array($mlid, $trail)) {
        $class .= ' active-trail';
      }
      // If it has children build a nice little tree under it.
      if ((!empty($menu_item['link']['has_children'])) && (!empty($menu_item['below'])) && $depth != 0) {
        // Keep passing children into the function 'til we get them all.
        $children = theme('nice_menus_build', $menu_item['below'], $depth, $trail);
        // Set the class to parent only of children are displayed.
        $parent_class = ($children && ($menu_item['link']['depth'] <= $depth || $depth == -1)) ? 'menuparent ' : '';
        $output .= '<li class="menu-' . $mlid . ' ' . $parent_class . $class . $first_class . $oddeven_class . $last_class .'">'. theme('menu_item_link', $menu_item['link']);
        // Check our depth parameters.
        if ($menu_item['link']['depth'] <= $depth || $depth == -1) {
          // Build the child UL only if children are displayed for the user.
          if ($children) {
            $output .= '<ul>';
            $output .= $children;
            $output .= "</ul>\n";
          }
          if ($menu_item['link']['title']==='My Forms') {
            $output .= '<ul>';
            $output .= '<li>test</li>';
            $output .= "</ul>\n";
          }
        }        
        $output .= "</li>\n";
      } elseif (strcasecmp($menu_item['link']['title'], 'My Forms')===0) {
        global $user;        
        // Use the cache to avoid loading all the form nodes each rebuild. 
        $formsMenu = cache_get('fsl-menu-'.$user->uid);
        if ($formsMenu)
          $output .= $formsMenu->data;
        else {
          profile_load_profile($user);
          $parent_class = empty($user->profile_favourite_library_forms) ? '' : 'menuparent ';
          $output .= '<li class="menu-' . $mlid . ' ' . $parent_class . $class . $first_class . $oddeven_class . $last_class .'">'. theme('menu_item_link', $menu_item['link']);
          // add a sub-menu for the user's favourite forms
          if (!empty($user->profile_favourite_library_forms)) {
            $output .= forms_and_surveys_submenu(unserialize($user->profile_favourite_library_forms));
          }
          $output .= "</li>\n";
        }
      } else {
        $output .= '<li class="menu-' . $mlid . ' ' . $class . $first_class . $oddeven_class . $last_class .'">'. theme('menu_item_link', $menu_item['link']) .'</li>'."\n";
      }
    }
  }
  return $output;
}

/**
 * Build the submenu from the list of forms.
 */
function forms_and_surveys_submenu($forms) {
  $fslMenu .= '<ul>';
  foreach($forms as $nid) {
    $node = node_load($nid);
    // Loop here to add the faves
    $fslMenu .= '<li>'.l(t($node->title), $node->path).'</li>';
  }
  $fslMenu .= '</ul>';
  cache_set('fsl-menu-'.$user->uid, $fslMenu);
  return $fslMenu;
}
