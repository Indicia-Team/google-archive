<?php

include_once('summary_reports.features.inc');

/**
 * Implement hook_nodeapi.
 * Replaces the view output for summary report with the appropriate Indicia report.
 * @param type $node
 * @param type $op
 * @param type $a3
 * @param type $a4 
 */
function summary_reports_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type==='summary_report')
    switch ($op) {
      case 'view':
        $node->content=array(
          'myfield'=>array(
            '#value'=>summary_report_build($node)
          )
        );
        break;
      case 'prepare':
        drupal_add_js(drupal_get_path('module', 'summary_reports').'/summary_reports_edit.js');
        break;
    }
}

function summary_report_build($node) {
  iform_load_helpers(array('report_helper'));
  $reportOptions = summary_report_get_report_options($node);
  $func = 'summary_report_build_'.$node->field_summary_report_display[0]['value'];
  $r = $func($node, $reportOptions);
  handle_resources();
  return $r;
}

function summary_report_get_report_options($node) {
  $readAuth = report_helper::get_read_auth(variable_get('indicia_website_id',''), variable_get('indicia_password',''));
  $r = array(
    'mode' => 'report',
    'readAuth' => $readAuth,
    'extraParams' => array(
      'date_from'=>'', 
      'date_to'=>'', 
      'survey_id'=>'',
      'location_type_id'=>'',
      'locattrs'=>'',
      'quality'=>$node->field_summary_report_quality[0]['value']
    )
  );
  switch ($node->field_summary_report_grouping[0]['value']) {
    case 'region':
      $folder = 'locations';
      break;
    case 'species':
      $folder = 'taxon_groups';
      break;
    case 'year':
      $folder = 'years';
      break;
    case 'month':
      $folder = 'months';
      break;
  }
  switch ($node->field_summary_report_count[0]['value']) {
    case 'records':
      $dataType = 'occurrence';
      break;
    case 'species':
      $dataType = 'species';
      break;
  }
  $r['dataSource'] = "library/$folder/$dataType"."_counts_mappable_summary";
  // Let the Indicia Quickstart module apply report parameters that are defined globally
  // on its report settings form.
  if (function_exists('indicia_quickstart_set_standard_report_params')) 
    indicia_quickstart_set_standard_report_params($r);
  return $r;
}

function summary_report_build_map($node, $reportOptions) {
  /**
   * @todo: Ensure report_helper changes to pass wantParameters and wantColumns are copied to SVN
   */
  iform_load_helpers(array('map_helper'));
  $r = map_helper::map_panel(array(
    'width' => '100%',
    'height' => 600,
    'initial_lat' => 51,
    'initial_long' => -2,
    'initial_zoom' => 8,
    'presetLayers' => array('google_physical'),
    'editLayer' => false
  ));
  // Are we drawing circles?
  if ($node->field_summary_report_map_output[0]['value']!=='polygoncolour')
    $reportOptions['displaySymbol']='circle';
  if ($node->field_summary_report_map_output[0]['value']==='circlesize')
    $reportOptions['valueOutput']=array(
      'pointRadius'=>array(
        'from'=>'5',
        'to' => '15',
        'valueField' => 'value',
        'minValue'=> '{minvalue}',
        'maxValue'=> '{maxvalue}'
      )
    );
  else {
    $reportOptions['valueOutput']=array(
      'fillColor'=>array(
        'from'=>'#0000CC',
        'to' => '#ff0033',
        'valueField' => 'value',
        'minValue'=> '{minvalue}',
        'maxValue'=> '{maxvalue}'
      ),
      'strokeColor'=>array(
        'from'=>'#0000CC',
        'to' => '#ff0033',
        'valueField' => 'value',
        'minValue'=> '{minvalue}',
        'maxValue'=> '{maxvalue}'
      )
    );
  }
  $r .= report_helper::report_map($reportOptions);
  return $r;
}

function summary_report_build_table($node, $reportOptions) {
  return report_helper::report_grid($reportOptions);
}

function summary_report_build_bar($node, $reportOptions) {
  return summary_report_graph($node, $reportOptions, 'bar');
}

function summary_report_build_pie($node, $reportOptions) {
  return summary_report_graph($node, $reportOptions, 'pie');
}

function summary_report_graph($node, $reportOptions, $graphType) {
  $reportOptions = array_merge($reportOptions, array(
    'width'=>'100%',
    'height'=>500,
    'chartType' => $graphType,
    'yValues'=>'value',
    'xLabels'=>'name'
  ));
  return report_helper::report_chart($reportOptions);
}