<?php
//An array to hold the ids of the existing user_email_notification_settings so we know when to update rather than add a new record
$existingIds=array();


function notification_emails_user($op, &$edit, &$account, $category = NULL) {
  iform_load_helpers(array('data_entry_helper'));
  $userId = hostsite_get_user_field('indicia_user_id');
  $readAuth = data_entry_helper::get_read_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  switch ($op) {
    //When a user is created, then automatically create profile fields
    //However as the user id is only created in the warehouse when the user first logs into drupal,
    //we can only create the user email notification settings at that point
    //So whenever a user logs in, if they don't have any settings for email notifications at all yet
    //then create some
    //We need to use a report rather than just the database view here as the view would return nothing if items had been deleted.
    //We need to know when there are deleted items as it means the user previously had settings that they have removed themselves, so
    //we don't want to create more defaults in that situation.
    case 'login':
      $freqSettingsData = data_entry_helper::get_report_data(array(
        'dataSource'=>'library/user_email_notification_settings/user_email_notification_settings_inc_deleted',
        'readAuth'=>$readAuth,
        'extraParams'=>array('user_id' => $userId)
      ));
      if (empty($freqSettingsData)) {
        $submissionForNewUser['email_species_alert_frequency']='IH';
        $submissionForNewUser['email_comment_frequency']='D';
        $submissionForNewUser['email_record_cleaner_frequency']='D';
        $submissionForNewUser['email_verification_frequency']='D';
        $submissionForNewUser['email_milestone_frequency']='D';
        $submissionForNewUser['email_verifier_task_frequency']='D';
        $submissionForNewUser['email_pending_record_task_frequency']='D';
        //Also update the warehouse when user created
        create_notification_emails_settings_submission($submissionForNewUser);
        drupal_set_message(t('Your account has been configured so that you will receive email updates about your notifications, including ' .
            'verification of records, comments and the results of automated checks on your records. You can change this behaviour under ' .
            l(t('My account'), 'my-account') . ' on the Edit page under the <strong>Email digest notification settings</strong> setting.'));
      }
      break;
    case 'submit':
      //On save update the warehouse so the profile is synced with warehouse.
      create_notification_emails_settings_submission($edit);
      break;
  }
}

/* 
 * When the screen loads, always try to load the profile fields on the page from the warehouse where possible.
 */
function notification_emails_form_alter(&$form, &$form_state, $form_id) {
  global $notification_emails_existing_data;
  $notification_emails_existing_data = array();
  if ($form_id==='user_profile_form' && isset($form[t('account')])) {
    iform_load_helpers(array('data_entry_helper'));
    $userId = hostsite_get_user_field('indicia_user_id');
    $auth = data_entry_helper::get_read_write_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
    //Get existing data from the warehouse for the user
    $freqSettingsData = data_entry_helper::get_population_data(array(
      'table' => 'user_email_notification_setting',
      'extraParams' => $auth['read'] + array('user_id' => $userId),
      'nocache' => true
    ));
    $notification_emails_existing_data = array();
    foreach ($freqSettingsData as $freqSettingsDataItem) {
      $notification_emails_existing_data[$freqSettingsDataItem['notification_source_type']] = array(
          'id' => $freqSettingsDataItem['id'],
          'notification_frequency' => $freqSettingsDataItem['notification_frequency'],
      );
    }
    drupal_add_js("
jQuery(document).ready(function($) {
  $('#edit-email-frequency').change(function() {
    $('#edit-email-comment-frequency,#edit-email-verification-frequency,#edit-email-milestone-frequency,#edit-email-verifier-task-frequency,#edit-email-pending-record-task-frequency').val($('#edit-email-frequency').val());
  });
  $('#edit-email-comment-frequency,#edit-email-verification-frequency,#edit-email-milestone-frequency,#edit-email-verifier-task-frequency,#edit-email-pending-record-task-frequency').change(function() {
    var firstFound=false, mixFound = false;
    $.each($('#edit-email-comment-frequency,#edit-email-verification-frequency,#edit-email-milestone-frequency,#edit-email-verifier-task-frequency,#edit-email-pending-record-task-frequency'), function() {
      if (!firstFound) {
        firstFound = $(this).val();
      }
      if (firstFound!==$(this).val()) {
        mixFound=true;
      }
    });
    // set the basic select to match the advanced options
    $('#edit-email-frequency').val(mixFound ? '-' : firstFound);
  });
});", 'inline');
    $form['email_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email digest notification settings'),
      '#weight' => 5,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['email_fieldset']['email_frequency'] = array(
      '#type' => 'select',
      '#title' => t('Email digest frequency'),
      '#description' => t('How often would you like to receive an email summarising your notifications?'),
      '#options' => array(
        '' => t('Never'),
        'IH' => t('Hourly'),
        'D' => t('Daily'),
        'W' => t('Weekly'),
        '-' => t('Use advanced settings below'),
      ),
    );
    $form['email_fieldset']['advanced_email_fieldset']  = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced notification settings'),
      '#description' => t('Control email notification digest frequency separately for each type of notification'),
      '#weight' => 2,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $selects = array(
      array('comment', 'comments on your records', 'C'),
      array('record_cleaner', 'automated Record Cleaner record checks', 'A'),
      array('verification', 'verification of your records', 'V'),
      array('milestone', "milestones and awards you've achieved", 'M',),
    );
    if (user_access('verification'))
      $selects[] = array('verifier_task', "records for you to verify", 'VT');
    if (user_access('mentoring')||user_access('moderator'))
      $selects[] = array('pending_record_task', "records for you to check", 'PT');
    $form['email_fieldset']['advanced_email_fieldset'] = array_merge(
        $form['email_fieldset']['advanced_email_fieldset'],
        notification_emails_advanced_selects($selects, $overallMode)
    );
    $form['email_fieldset']['email_frequency']['#default_value'] = $overallMode;
  }
}

function notification_emails_advanced_selects($arr, &$overallMode) {
  global $notification_emails_existing_data;
  $firstFound = false;
  $mixFound = false;
  $r = array();
  // if we don't have a full complement of setttings in the database, then it means some are marked as never. 
  if (count($notification_emails_existing_data) < count($arr))
    $firstFound = '-';
  foreach ($arr as $def) {
    $r["email_$def[0]_frequency"] = array(
      '#type' => 'select',
      '#title' => t('Email digest frequency for @type', array('@type' => t($def[1]))),
      '#description' => t('How often would you like to receive an email summarising your notifications about @type?', array('@type' => t($def[1]))),
      '#options' => array(
        '' => t('Never'),
        'IH' => t('Hourly'),
        'D' => t('Daily'),
        'W' => t('Weekly'),
      ),
    );
    if (!empty($notification_emails_existing_data[$def[2]])) {
      $r["email_$def[0]_frequency"]['#default_value'] = $notification_emails_existing_data[$def[2]]['notification_frequency'];
      // track if all the settings are the same or not. This affects the default value we can apply to the basic drop down
      // which controls all of the settings in one go.
      if (!$firstFound)
        $firstFound = $notification_emails_existing_data[$def[2]]['notification_frequency'];
      if ($firstFound !== $notification_emails_existing_data[$def[2]]['notification_frequency']) 
        $mixFound = true;
    }
  }
  $overallMode = $mixFound ? '-' : $firstFound;
  return $r;
}

/*
 * Create data structure to submit to warehouse when user saves
 */
function create_notification_emails_settings_submission($edit) {
  global $notification_emails_existing_data;
  $auth = data_entry_helper::get_read_write_auth(variable_get('indicia_website_id', ''), variable_get('indicia_password', ''));
  $submission['id']='user_email_notification_setting';
  $submission['submission_list']['entries'] = array();
  foreach ($edit as $fieldname => $value) {
    //Each drop-down is related to a notification source type
    switch ($fieldname) {
      case 'email_species_alert_frequency' :
        $sourceType='S';
        break;
      case 'email_comment_frequency' :
        $sourceType='C';
        break;
      case 'email_record_cleaner_frequency' :
        $sourceType='A';
        break;
      case 'email_verification_frequency' :
        $sourceType='V';
        break;
      case 'email_milestone_frequency' :
        $sourceType='M';
        break;
      case 'email_verifier_task_frequency' :
        $sourceType='VT';
        break;
      case 'email_pending_record_task_frequency' :
        $sourceType='PT';
        break;
      default :
        $sourceType=false; // ignore any other submitted fields
    }
    if (!$sourceType)
      continue;
    //If the drop-down is set to blank, and it is a new item rather than a drop-down the user has changed to being being from an existing selection, then we can ignore this code as we don't need to take any action.
    if (!($edit[$fieldname]===''&&empty($notification_emails_existing_data[$sourceType]))) {
      $data = array('id' => 'user_email_notification_setting', 'fields' => array());
      if (!empty($notification_emails_existing_data[$sourceType]))
        $data['fields']['id'] = array('value' => $notification_emails_existing_data[$sourceType]['id']);
      //For existing records that are then set to blank, we can delete the user_email_notification_setting
      if ($edit[$fieldname]==='') {
        $data['fields']['deleted'] = array('value' => 't');
      } else {
        $data['fields']['user_id'] = array('value' => hostsite_get_user_field('indicia_user_id'));
        $data['fields']['notification_source_type'] = array('value' => $sourceType);
        //The source frequency to use is simply the value from the select drop-down, so grab from post for the fieldname
        $data['fields']['notification_frequency'] = array('value' => $edit[$fieldname]);
      }
      $submission['submission_list']['entries'][] = $data;
      //Set the data holder to empty once we have given it to the submissions list so we can re-use it
      $data=array();
    }

  }
  //Submit the stucture for processing
  if (count($submission['submission_list']['entries'])) {
    $response = data_entry_helper::forward_post_to('save', $submission, $auth['write_tokens']);
    if (!(is_array($response) && array_key_exists('success', $response)))
      drupal_set_message(print_r($response,true));
  }
  
}

