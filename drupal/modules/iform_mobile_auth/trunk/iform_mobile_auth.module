<?php

/**
 * @file
 * Iform Mobile Authentication Module's Core functionality.
 */

/*
 * Implements hook_perm().
 */
  function iform_mobile_auth_perm(){
    return array(
      'admin', 
      'user'
     ); 
 }

/*
 * Submit the relevant information to indicia
 */
if(module_exists('iform')) {
  iform_load_helpers(array('data_entry_helper'));
}

/**
 * Generates a list of profile fields
 */
function iform_mobile_auth_profile_fields(){
    return (object)array(
        'profile_indicia_user_id' => (object)array(
            'category' => 'System',
            'type' => 'textfield',
            'title' => 'User ID for this account on the warehouse',
            'name' => 'profile_indicia_user_id',
        ),
        'profile_first_name' => (object)array(
            'category' => 'Name',
            'type' => 'textfield',
            'title' => 'User\'s first name',
            'name' => 'profile_first_name',
        ),
        'profile_last_name' => (object)array(
            'category' => 'Name',
            'type' => 'textfield',
            'title' => 'User\'s last name',
            'name' => 'profile_last_name',
        ),
        'profile_indicia_mobile_auth_shared_secret' => (object)array(
            'category' => 'Indicia mobile auth',
            'type' => 'textfield',
            'title' => 'User shared secret',
            'name' => 'profile_indicia_mobile_auth_shared_secret',
        ),
        'profile_confirmation_code' => (object)array(
            'category' => 'Indicia mobile auth',
            'type' => 'textfield',
            'title' => 'One-time login code for mobile registered user',
            'name' => 'profile_confirmation_code',
        )
    );
}

/**
 * Custom implementation of profile_save_profile to handle updating of VISIBILITY 4 fields 
 * when running outside of an authenticated user (and tweaking to allow sending $user as $edit var)
 */
function iform_mobile_auth_profile_save_fields(&$edit, &$user, $category){
  $result = db_query("SELECT * FROM {profile_fields} WHERE LOWER(category) = LOWER('%s') ORDER BY category, weight", array($category));
  
  while ($field = db_fetch_object($result)) {
    if (_profile_field_serialize($field->type)) {
      $name=$field->name;
      $edit->$name = serialize($edit->$name);
    }
    $name = $field->name;

    db_query("DELETE FROM {profile_values} WHERE fid = %d AND uid = %d", $field->fid, $user->uid);
    
    db_query("INSERT INTO {profile_values} (fid, uid, value) VALUES (%d, %d, '%s')", $field->fid, $user->uid, $edit->$name);
    // Mark field as handled (prevents saving to user->data).
    $edit->$name = NULL;
  }

}

/**
 * Implementation of hook_menu().
 */
function iform_mobile_auth_menu() {
  $items = array();

  // Mobile registration-based actions
  $items['user/mobile/register'] = array(
    'title'             => 'Accepts a request to register or handles login',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_mobile_auth_user_register',
    'access callback'   => true,
  );
  $items['user/mobile/activate/%/%'] = array(
    'title'             => 'Handle account activation',
    'type'              => MENU_CALLBACK,
    'page callback'     => 'iform_mobile_auth_user_activate',
    'page arguments'    => array(3,4),
    'access callback'   => true,
  );
  // Mobile based record submission
  $items['mobile/submit'] = array(
    'title'             => 'Submit a sample',
    'page callback'     => 'iform_mobile_auth_client_submission',
    'access callback'   => true,
  );
  // Mobile based report access
  $items['mobile/report'] = array(
    'title'             => 'Access a report',
    'page callback'     => 'iform_mobile_auth_report',
    'access callback'   => true,
  );
  //User Interface options
  //Dashboard
  $items['admin/settings/iform/mobile/dashboard'] = array(
    'title' => 'Mobile Authentication',
    'description' =>  'Configure variables relating to the mobile authorisation module',
    'page callback' => 'iform_mobile_auth_dashboard',
    'access arguments' => array('user'),
    'file' => 'iform_mobile_auth.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  //Add
  $items['admin/settings/iform/mobile'] = array(
    'title' => 'Mobile Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iform_mobile_auth_app'),
    'access arguments' => array('user'),
    'file' => 'iform_mobile_auth.admin.inc',
    'type' => MENU_CALLBACK,
  );
  //Edit
  $items['admin/settings/iform/mobile/%iform_mobile_auth_app'] = array(
    'title' => 'App settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iform_mobile_auth_app', 4),
    'access arguments' => array('user'),
    'file' => 'iform_mobile_auth.admin.inc',
    'type' => MENU_CALLBACK,
  );
  //Delete
  $items['admin/settings/iform/mobile/delete/%iform_mobile_auth_app'] = array(
    'title' => 'Delete App',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iform_mobile_auth_delete', 5),
    'access arguments' => array('user'),
    'file' => 'iform_mobile_auth.admin.inc',
    'type' => MENU_CALLBACK,
  ); 
  return $items;
}

/**
 * This function handles the register/login request from a mobile app.
 * The function either returns a HTTP error status code or the user's secret token
 */
function iform_mobile_auth_user_register() {

    drupal_set_header('Content-type: text/plain; charset=UTF-8');
    
    // initalise variables...
    $category = 'Indicia';
    
    // setup the profile fields
    $shared_secret_field = 'profile_indicia_mobile_auth_shared_secret';
    $confirmation_code_field = 'profile_confirmation_code';
    
    // shared secret which needs to match that provided by app
    $saved_appsecret = variable_get('iform_mobile_auth_shared_secret', NULL);

    iform_mobile_auth_log('iform_mobile_auth_user_register');
    iform_mobile_auth_log(print_r($_POST,1));
    
    // pull out parameters from POST request
    $firstname = $_POST['firstname'];
    $secondname = $_POST['secondname'];
    $email = $_POST['email'];
    $password = $_POST['password'];
    $provided_appsecret = $_POST['appsecret'];
    $provided_appname = $_POST['appname'];
    
    // Step 1.
    // Check minimum valid parameters
    if (empty($email) || empty($password) || empty($provided_appsecret)) 
    {
        drupal_set_header('HTTP/1.1 400 Bad Request');
        print 'Bad request';
        iform_mobile_auth_log('Missing parameter');
        return;
    }
    
    // Step 2.
    // Reject submissions with an incorrect secret (or instances where secret is not set)
    if (!iform_mobile_auth_authorise_app($provided_appname, $provided_appsecret))
    {
        iform_mobile_auth_log('Missing or incorrect shared app secret');
        drupal_set_header('HTTP/1.1 400 Bad Request');
        print 'Bad request';
        return;
    }
    
    // Step 3.
    // Check email is valid
    if (valid_email_address($email) != 1)
    {
        iform_mobile_auth_log('Invalid email');
        drupal_set_header('HTTP/1.1 400 Bad Request');
        print 'Invalid email';
        return;
    }
    
    // Step 3.
    // Apply a password strength requirement
    if (iform_mobile_auth_validate_password($password) != 1)
    {
        iform_mobile_auth_log('Password not strong enough');
        drupal_set_header('HTTP/1.1 400 Bad Request');
        print 'Invalid password';
        return;
    }

    // Step 4.
    // Check for an existing user. If found (and password matches) return the secret to all user to 'log in' via app
    if (user_load(array('mail' => $email)) != FALSE)
    {
        // Email already exists
        $existing_user = user_load(array('mail' => $email, 'pass' => $password));
        if ($existing_user == FALSE)
        {
            drupal_set_header('HTTP/1.1 401 Unauthorized');
            print 'Invalid password';
            iform_mobile_auth_log('Invalid password');
        }
        else
        {
            profile_load_profile($existing_user);
            if (!isset($existing_user->$shared_secret_field))
            {
                // create a new user-secret if this user doesn't already have one 
                // (they registered directly with the site)
                iform_mobile_auth_log('Creating new shared secret');
                $usersecret = iform_mobile_auth_generate_random_string(10);
                $existing_user->$shared_secret_field = $usersecret;
                $category = iform_mobile_auth_profile_fields()->$shared_secret_field->category;
                iform_mobile_auth_profile_save_fields($existing_user, $existing_user, $category);
                profile_load_profile($existing_user);
            }
            
            // check if the user has submitted names (they are creating a new account by accident)
            if (!empty($firstname) || !empty($secondname))
            {
                drupal_set_header('HTTP/1.1 409 Conflict');
                print 'First or second name missmatch';
                iform_mobile_auth_log('First or second name missmatch');
                return;
            }
            else
            {
                $error = '';
                
                // Check for existing users that do not have indicia id in their profile field
                if (!isset($existing_user->profile_indicia_user_id) || $existing_user->profile_indicia_user_id == -1)
                {
                    iform_mobile_auth_log('Associating indicia user id');
                    // Look up indicia id...
                    $indicia_user_id = iform_mobile_auth_get_user_id($existing_user->mail, 
                                                                     $existing_user->profile_first_name,
                                                                     $existing_user->profile_last_name,
                                                                     $existing_user->uid);
                    
                    if (is_int($indicia_user_id)) {
                        $category = iform_mobile_auth_profile_fields()->profile_indicia_user_id->category;
                        $existing_user->profile_indicia_user_id = $indicia_user_id;
                        iform_mobile_auth_profile_save_fields($existing_user, $existing_user, $category);
                        profile_load_profile($existing_user);
                    }
                    else {
                        $error = $indicia_user_id;
                    }
                }
                
                // return the user's secret and name to be stored by app
                print $existing_user->$shared_secret_field;
                print "\n";
                print $existing_user->profile_first_name;
                print "\n";
                print $existing_user->profile_last_name;
                print "\n";
                print $error;
            }
        }
        return;
    }

    // Step 5.
    // User is registering for first time. Require first and second name
        
    if (empty($firstname) || empty($secondname)) 
    {
        drupal_set_header('HTTP/1.1 400 Bad Request');
        print 'Missing name parameter';
        iform_mobile_auth_log('First or second name empty');
        return;
    }
    
    // Step 6.
    // Create account for user
        
    // generate the user's shared secret returned to the app
    $usersecret = iform_mobile_auth_generate_random_string(10);
        
    // generate the user confirmation code returned via email
    $confirmation_code = iform_mobile_auth_generate_random_string(20);
    
    $roles = user_roles(true);
    $user_details = array('pass' => $password, /* handles the (unsalted) hash process */
                          'name' => $email,
                          'mail' => $email);
                          
    $new_user = user_save(NULL,$user_details);
                          
    // Step 7.
    // Associate indicia_id with user account
    
    // Look up indicia id...
    $indicia_user_id = iform_mobile_auth_get_user_id($email, $firstname, $secondname, $new_user->uid);
    
    $error = '';
    // handle iform_mobile_auth_get_user_id returning an error
    if (!is_int($indicia_user_id))
    {
        $indicia_user_id = -1;
        $error = $indicia_user_id;
    }
    
    // update the userid
    $new_user->roles[2] = $roles[2]; // authenticated user role
    $new_user = user_save($new_user);

    // save all the profile fields
    profile_load_profile($new_user);
    
    $category = iform_mobile_auth_profile_fields()->profile_first_name->category;
    $new_user->profile_first_name = $firstname;
    $new_user->profile_last_name = $secondname;
    iform_mobile_auth_profile_save_fields($new_user, $new_user, $category);
    
    $category = iform_mobile_auth_profile_fields()->profile_indicia_user_id->category;
    $new_user->profile_indicia_user_id = $indicia_user_id;
    iform_mobile_auth_profile_save_fields($new_user, $new_user, $category);
    
    $category = iform_mobile_auth_profile_fields()->$shared_secret_field->category;
    $new_user->$shared_secret_field = $usersecret;
    $new_user->$confirmation_code_field = $confirmation_code;
    iform_mobile_auth_profile_save_fields($new_user, $new_user, $category);
    
    profile_load_profile($new_user);
    
    // Step 8.
    // Send activation mail
    global $base_url;
    $activation_url = $base_url . '/user/mobile/activate/' . $new_user->uid . '/' . $confirmation_code;
    
    $from = variable_get('site_mail', ini_get('sendmail_from'));
    $subject = variable_get('iform_mobile_auth_registration_subject', "Welcome to !site");
    $body = variable_get('iform_mobile_auth_registration_body', "Activate your account by clicking on the following link:<br/>!activation_url");

    $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal',
        'From' => $from,
    );

    $message = array(
      'to' => $email,
      'subject' => t($subject,array("!site" => variable_get('site_name', "Indicia"))),
      'body' => t($body, array("!activation_url" => $activation_url)),
      'headers' => $headers,
    );

    drupal_mail_send($message);

    // return the user's secret and name to be stored by app
    print $new_user->$shared_secret_field;
    print "\n";
    print $new_user->profile_first_name;
    print "\n";
    print $new_user->profile_last_name;
    print "\n";
    print $error;
}


/**
 * Handles the request for account activation
 */
function iform_mobile_auth_user_activate($uid, $code)
{
    drupal_set_header('Content-type: text/plain; charset=UTF-8');

    $user = user_load(array('uid' => intval($uid)));
    profile_load_profile($user);
    $key = 'profile_confirmation_code';
    $category = iform_mobile_auth_profile_fields()->$key->category;
    if ($user->$key == $code)
    {
        iform_mobile_auth_log("Activating user ".$uid." with code ".$code."");

        $user->$key = NULL;
        iform_mobile_auth_profile_save_fields($user, $user, $category);
        user_save($user,array('status' => 1));

        $path = variable_get('iform_mobile_auth_registration_redirect', "<front>");
        
        // redirect to page of admin's choosing
        drupal_goto($path);
    }
    else
    {
        $path = variable_get('iform_mobile_auth_registration_redirect_unsuccessful', "<front>");
        
        // redirect to page of admin's choosing
        drupal_goto($path);
    }
}


/**
 * Handles record submissions from mobile apps
 */
function iform_mobile_auth_client_submission() {

    drupal_set_header('Content-type: text/plain; charset=UTF-8');

    iform_mobile_auth_log('iform_mobile_auth_client_submission');
    iform_mobile_auth_log('POST REQUEST');
    iform_mobile_auth_log(print_r($_POST,1));
    
    // Steps 1 to 4 are covered in the request authorisation
    if (!$existing_user = iform_mobile_auth_authorise_request())
      return;
    
    $safe_website_id = intval($_POST['website_id']);
    $safe_survey_id = intval($_POST['survey_id']);    

    // Step 5.
    // Replace user parameters in submission
    foreach ($_POST as $key => $value)
    {
        if ($value == '[userid]') $_POST[$key] = $existing_user->uid;
        if ($value == '[username]') $_POST[$key] = $existing_user->name;
        if ($value == '[email]') $_POST[$key] = $existing_user->mail;
        if ($value == '[firstname]') $_POST[$key] = $existing_user->profile_first_name;
        if ($value == '[surname]') $_POST[$key] = $existing_user->profile_last_name;
    }
    
    // Step 6.
    // Proceed to process the submission...
    
    // get connection/indicia website details
    $connection = iform_get_connection_details(NULL);    

    $postargs = array();
    $postargs['website_id'] = $safe_website_id;
    
    // obtain nonce  
    $curl_check = data_entry_helper::http_post(helper_config::$base_url.'index.php/services/security/get_nonce', $postargs, false);
    
    if (isset($curl_check['result'])) {
        
        if (isset($_FILES['photo1'])) {
            // rename attached file to be picked up correctly
            $_FILES['occurrence:image:1'] = $_FILES['photo1'];

            // mobile generated files can have file name in format resize.jpg?1333102276814
            // which will fail the warehouse submission process
            if (strstr($_FILES['occurrence:image:1']['type'],'jpg') !== FALSE || 
                strstr($_FILES['occurrence:image:1']['type'],'jpeg') !== FALSE)
            {
                $_FILES['occurrence:image:1']['name'] = uniqid().'.jpg';
            }
            if (strstr($_FILES['occurrence:image:1']['type'],'png') !== FALSE)
            {
                $_FILES['occurrence:image:1']['name'] = uniqid().'.png';
            }
            unset($_FILES['photo1']);
            iform_mobile_auth_log(print_r($_FILES,1));
        }
        
        $nonce =  $curl_check['output'];

        // construct post parameter array
        $params = array();

        // general info
        $params['website_id'] = $safe_website_id;
        $params['survey_id'] = $safe_survey_id;
        $params['auth_token'] = sha1($nonce.":".$connection['password']);
        $params['nonce'] = $nonce;
        
        // Obtain coordinates of location if a name is specified
        $georeftype = iform_mobile_auth_escape($_POST['sample:entered_sref_system']);
        
        $ref = trim(iform_mobile_auth_escape($_POST['sample:entered_sref']));
        
        unset($_POST['sample:entered_sref_system']);
        unset($_POST['sample:entered_sref']);

        if ($georeftype == 'text')
        {
            // geocode the submitted location            
            $baseGoogle = "http://maps.googleapis.com/maps/api/geocode/json?region=uk&sensor=false&address=";
            $url = $baseGoogle . urlencode($ref);

            $session = curl_init();
            curl_setopt($session, CURLOPT_URL, $url);
            curl_setopt($session, CURLOPT_HEADER, false);
            curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
            
            // Do the POST
            $response = curl_exec($session);

            iform_mobile_auth_log($response);
            
            // close cURL resource
            curl_close($session);

            $loc = json_decode($response);

            $loc = $loc->results[0]->geometry->location;
            if(isset($loc)) $ref = $loc->lat.",".$loc->lng;
            else $ref = "0,0"; // default location if unable to geocode
            
            $georeftype = 4326;
        }
        
        // enter sample info
        $params['sample:entered_sref'] = $ref;
        $params['sample:entered_sref_system'] = $georeftype;
        $params['sample:geom'] = '';
        $params['gridmode'] = 'true';
        
        // enter occurrence info
        $params['occurrence:present'] = 'on';
        $params['occurrence:record_status'] = 'C';

        $isOccurrencesList = FALSE;
        // add all supplied data
        foreach ($_POST as $key => $value)
        {
            if (strstr($key,'smpAttr:') != FALSE)
            {
                $params[$key] = iform_mobile_auth_escape($value);
            }
            if (strstr($key,'sample:') != FALSE)
            {
                $params[$key] = iform_mobile_auth_escape($value);
            }
            if (strstr($key,'occurrence:') != FALSE)
            {
                $params[$key] = iform_mobile_auth_escape($value);
            }
            if (strstr($key,'sc:') != FALSE)
            {
                // sc: params indicate a list submission
                $isOccurrencesList = TRUE;
                $params[$key] = iform_mobile_auth_escape($value);
            }
        }

        if ($isOccurrencesList) 
        {
            $submission = data_entry_helper::build_sample_occurrences_list_submission($params);
        }
        else 
        {
            $submission = data_entry_helper::build_sample_occurrence_submission($params);
        }

        iform_mobile_auth_log('Sending the following fields:');
        foreach ($params as $key => $value)
        {
            iform_mobile_auth_log($key . '=>' . $value);
        }
        
        $writeTokens = array();
        $writeTokens['auth_token'] = sha1($nonce.":".$connection['password']);
        $writeTokens['nonce'] = $nonce;
        
        // send record to indicia
        $output = data_entry_helper::forward_post_to('sample', $submission, $writeTokens);
        
        if (isset($output['error']))
        {
            // something went wrong
            drupal_set_header('HTTP/1.1 502 Bad Gateway');
            print_r($ouput['error']);
        }

        iform_mobile_auth_log(print_r($output,1));
    }
    else
    {    
        // something went wrong in obtaining nonce
        drupal_set_header('HTTP/1.1 502 Bad Gateway');
        print_r($curl_check);
        iform_mobile_auth_log($curl_check);
    }
}

/**
 * Menu function to retrieve the results of a report which responds to the mobile/report
 * web service endpoint.
 *
 * Parameters can be provided as GET or POST data, since POST is required when supporting long parameter values for
 * geometry filters. Requires the following query parameters:
 * * report - the path to the report file to run on the warehouse, e.g. 'library/totals/filterable_species_occurrence_image_counts.xml'
 * * email - the logged in user's email, used for authentication
 * * usersecret - the user secret key, used for authentication
 * * appsecret - the shared app secret key, used for authentication.
 * * caching - optional setting to define the caching mode which defaults to false (no caching).
 *   Set to global for a single global cache entry (which cannot be used for user-specific reports) 
 *   or set to perUser to cache the report on a per user basis.
 * * cacheTimeout - number of seconds before which the cache cannot expire. After this, there is a random
 *   chance of expiry on each hit. Defaults to 3600.
 * Additionally, provide a query parameter for each report parameter value, orderby, sortdir, limit or offset you wish to pass 
 * to the report. 
 * Prints out a JSON string for the report response.
 * 
 */
function iform_mobile_auth_report() {
  //drupal_set_header('Content-Type: application/json; charset=UTF-8');
  // Don't use $_REQUEST as it escapes values in strange way
  $request = $_POST + $_GET;
  iform_mobile_auth_log('iform_mobile_auth_report');
  iform_mobile_auth_log('REQUEST');
  iform_mobile_auth_log(print_r($request,1));
  if (empty($request['report'])) {
    print 'Bad request';
    iform_mobile_auth_log('Missing report parameter');
    return;
  }
  
  if (!$existing_user = iform_mobile_auth_authorise_request())    
    return;
  $connection = iform_get_connection_details(NULL);
  $auth = data_entry_helper::get_read_auth($connection['website_id'], $connection['password']);
  $url = helper_config::$base_url.'index.php/services/report/requestReport';
  $caching = !empty($request['caching']) ? $request['caching'] : 'false';
  $cacheTimeout = !empty($request['cacheTimeout']) ? $request['cacheTimeout'] : 3600;
  unset($request['appsecret']);
  unset($request['usersecret']);
  unset($request['email']);
  unset($request['cacheTimeout']);
  $defaults = array(
    'reportSource' => 'local'
  );
  if ($caching==='false' || $request['caching']==='perUser')
    $request['user_id'] = $existing_user->profile_indicia_user_id;
  $request = array_merge($defaults, $auth, $request);
  $cacheLoaded = false;
  if ($caching!=='false') {
    $response = data_entry_helper::cache_get($request, $cacheTimeout);
    if ($response!==false) {
      $response = json_decode($response, true);
      $cacheLoaded = true;
      print "cache read $cacheTimeout<br/>";
    }
  }
  if (!isset($response) || $response===false) {
    $response = data_entry_helper::http_post($url . '?' . data_entry_helper::array_to_query_string($request));
  }
  if (isset($response['output'])) {
    print ($response['output']);
    if ($caching!=='false' && !$cacheLoaded ) { 
      data_entry_helper::cache_set($request, json_encode($response), $cacheTimeout);
      print ' Stored in cache.<br/> ';
    }
  }
  else {
    print 'Bad request';
    iform_mobile_auth_log('Report returned '.print_r($response, true));
  }
  return;
}

/**
 * Authorise a request to either submit or read records from an app.
 *
 * Uses the posted usersecret, appsecret and email to check that the app is authorised and
 * that the user is valid and activated.
 * @return object Drupal user object, or FALSE if not authorised.
 */
function iform_mobile_auth_authorise_request() {
    
  // pull out expected parameters from POST request
  $usersecret = $_POST['usersecret'];
  $provided_appsecret = $_POST['appsecret'];
  $provided_appname = $_POST['appname'];
  $email = $_POST['email'];
  
  // Step 1
  // Verify APP shared secret
 if (!iform_mobile_auth_authorise_app($provided_appname, $provided_appsecret))
  {
    drupal_set_header('HTTP/1.1 400 Bad Request');
    print 'Bad request';
    iform_mobile_auth_log('Missing or incorrect shared app secret');
    return FALSE;
  }
  
  // Step 2.
  // Locate corresponding user
  $existing_user = user_load(array('mail' => $email));

  if (empty($email) || $existing_user == FALSE)
  {
    if (empty($email)) $email = "app@mobile.net";
    iform_mobile_auth_log('No corresponding user found with email');
    $existing_user = (object)array("uid" => 0,
                                   profile_indicia_user_id => "1", 
                                   "name" => $email,
                                   "mail" => $email,
                                   'profile_first_name' => "Anonymous",
                                   'profile_last_name' => "Anonymous");
  }
  else
  {
    // load profile fields
    profile_load_profile($existing_user);
    // Step 3.
    // Verify USER shared secret...
    if (empty($usersecret) || $usersecret != $existing_user->profile_indicia_mobile_auth_shared_secret)
    {
      drupal_set_header('HTTP/1.1 400 Bad Request');
      print 'Bad request';
      iform_mobile_auth_log('User secret incorrect');
      return FALSE;
    }
    // Step 4.
    // Check user activation status
    if ($existing_user->status != 1)
    {
      iform_mobile_auth_log('User not activated');
      drupal_set_header('HTTP/1.1 407 Proxy Authentication Required');
      print 'User not activated';
      return FALSE;
    }
  }  
  // assign this user to gobal user var so that it can be added to the indicia submission
  iform_mobile_auth_log(print_r($existing_user,1));
  $GLOBALS['user'] = $existing_user;
  return $existing_user;
}


##########################
#### HELPER FUNCTIONS ####
##########################

/**
 * Checks if the user is allowed to see a saved app account.
 */  
function userHasPermission($app = NULL){
   global $user;
   return user_access('admin') || (!is_null($app) && $app->created_by === $user->uid);
 }

/**
 * Implements hook_load() to load the apps from the database.
 */
function iform_mobile_auth_app_load($id = NULL) {
  if ($id){
    //get specific app account
    $apps = db_query("SELECT * FROM {iform_mobile_auth} WHERE id = %d ORDER BY title", $id);
    return $apps;
  } else{
    //all accounts
    $apps = db_query("SELECT * FROM {iform_mobile_auth} ORDER BY title");
    return $apps;
  }
} 


/**
 * The core function that checks if the sent mobile application password and name 
 * matches any in the database.
 * 
 * If no $name was provided then the account is assumed to be anonymous.
 * 
 * This function iterates through the list of app accounts from database table
 * with the matching name. This means it is allowed for one appname to have more than one
 * appsecret, and if any of the secrets match the provided secret than the authorisation is given.
 */
function iform_mobile_auth_authorise_app($name, $secret)
{
  if (empty($secret)){
    return FALSE; 
  }

  //case for anonymous user
  $name = empty($name) ? 'anonymous' : $name;
  
  $result = db_query("SELECT * FROM {iform_mobile_auth} WHERE name = '%s'", $name);
  while ($app = db_fetch_object($result)) {
      if ($secret === $app->secret){
        return TRUE;
        break;
      }
  }

  return FALSE;
}


/**
 * A function to escape user input.
 * Currently simply a wrapper around drupal's check_plain function.
 */
function iform_mobile_auth_escape($str)
{
    return check_plain($str);
}


/**
 * A simple utility method to generate a random string of specific length.
 */
function iform_mobile_auth_generate_random_string($length = 10)
{
    return substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, $length);
}


/**
 * This calls the index.php/services/user_identifier/get_user_id service to return an indicia id which
 * can be associated with the user account.
 */
function iform_mobile_auth_get_user_id($email, $firstname, $secondname, $cms_id)
{
    // get connection/indicia website details
    $connection = iform_get_connection_details(NULL);
    
    $postargs = array();
    $postargs['website_id'] = $connection['website_id'];
    
    // obtain nonce  
    $curl_check = data_entry_helper::http_post(helper_config::$base_url.'index.php/services/security/get_nonce', $postargs);

    if ($curl_check['result']) {
        $nonce =  $curl_check['output'];
        
        $postargs = array();
        $postargs['identifiers'] = '[{"type":"email","identifier":"'.$email.'"}]';
        $postargs['auth_token'] = sha1($nonce.":".$connection['password']);
        $postargs['surname'] = $secondname;
        $postargs['first_name'] = $firstname;
        $postargs['cms_user_id'] = $cms_id;
        $postargs['force'] = 'split';
        $postargs['nonce'] = $nonce;
        
        iform_mobile_auth_log(print_r($postargs,1));
        
        // request the user id
        $get_id_results = data_entry_helper::http_post(helper_config::$base_url.'index.php/services/user_identifier/get_user_id', $postargs, false);
        iform_mobile_auth_log(print_r($get_id_results,1));
        
        $result = json_decode($get_id_results['output']);
        if (!isset($result->error))
        {
            return intval($result->userId);
        }
        else
        {
            iform_mobile_auth_log('Error in iform_mobile_auth_get_user_id:'.$result->error);
            return $result->error;
        }
    }
    else
    {
        iform_mobile_auth_log('iform_mobile_auth_get_user_id:Unable to retreive nonce');
    }
    
    return -1;
}


/**
 * Returns TRUE if the supplied password is acceptable.
 * Simple at the moment but could contain additional checks (alpha-numerics, special chars etc)
 */
function iform_mobile_auth_validate_password($pass)
{
    return strlen($pass) >= 0;
}


/**
 * Returns TRUE if the module is in debug mode
 */
function iform_mobile_auth_debug_mode()
{
    return variable_get('iform_mobile_auth_debug', 0) == 1;
}


function iform_mobile_auth_log($message)
{
    // obtain debug mode indicator
    $debug = iform_mobile_auth_debug_mode();
    if ($debug)
    {
        error_log($message);
        watchdog("mobile_auth",$message);
    }
}
