<?php
// $Id$

/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function iform_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#iform":
      $output = '<p>'.  t("Generates Indicia powered data entry forms.") .'</p>';
      break;
  }
  return $output;
} // function iform_help

/**
* Valid permissions for this module
* @return array An array of valid permissions for the iform module
*/
function iform_perm() {
  $retVal = array('access iform', 'create iform', 'edit iform', 'edit own iform');
  // Go through every IForm node.
  //   Get the particular iform, check if it has a perms method.
  //   if yes, call it and add to the return list
  $results = db_query('SELECT n.nid, i.iform FROM {iform} i, {node} n WHERE i.nid = n.nid');
  while($result = db_fetch_object($results)) {
	require_once drupal_get_path('module', 'iform').'/client_helpers/data_entry_helper.php';
	require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$result->iform.'.php';
	if(method_exists('iform_'.$result->iform, 'get_perms')) {
	  $perms = call_user_func(array('iform_'.$result->iform, 'get_perms'), $result->nid);
	  $retVal = array_merge($retVal, $perms);
	}
  }
  return $retVal;

} // function iform_perm()

/**
 * Implementation for hook_node_info.
 * Returns summary information for the content type.
 * @return array Summary information array.
 */
function iform_node_info() {
  return array(
    'iform' => array(
      'name' => t('Indicia forms'),
      'module' => 'iform',
      'description' => "Create Indicia powered data entry forms.",
      'title_label' => "Page title",
      'body_label' => "Page introductory text",
    )
  );
} // function iform_node_info

/**
 * Implements hook_access.
 * Authentication for access to create, view and delete indicia form pages.
 * @param $op
 * @param $node
 * @param $account
 * @return unknown_type
 */
function iform_access($op, $node, $account) {
  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create iform', $account);
  }
  
  if ($op == 'view') {
    // Only users with permission to do so may create this node type.
    return user_access('access iform', $account);
  }

  // Users may have access to edit (update/delete) their own forms, or any form.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own iform', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    } else {
      return user_access('edit iform', $account);
    } 
  }
} 

/** 
 * Retrieve the parameters for an iform. This is defined by each iform individually.
 * @param object $node The node that the iform is linked to. 
 * @return array List of parameter definitions.
 */
function get_form_parameters($node) {
  // First some parameters that are always required to configure the website
  $params = array(
      array(
        'name'=>'website_id',
        'caption'=>'Website ID',
        'description'=>'The ID of the website that data will be posted into.',
        'type'=>'textfield',
        'group' => 'Website'
      ),
      array(
        'name'=>'password',
        'caption'=>'Website Password',
        'description'=>'The Password of the website that data will be posted into.',
        'type'=>'textfield',
        'group' => 'Website'
      )
  );
  // Now get the specific parameters from the form
  $params = array_merge($params, call_user_func(array('iform_'.$node->iform, 'get_parameters')));
  // Add in a standard parameter for specifying a redirection.
  array_push($params, 
    array(
    	'name'=>'redirect_on_success',
      'caption'=>'Redirect to page after successful data entry',
      'description'=>'The URL of the page that will be navigated to after a successful data entry. '. 
          'Leave blank to just display a success message on the same page so further records can be entered. If the site is internationalised, '.
          'make sure that the page you want to go to has a URL specified that is the same for all language versions. Also ensure your site uses '.
          'a path prefix for the language negotiation (Administer > Site Configuration > Languages > Configure). Then, specify the URL that you attached to the node '.
          'so that the language prefix is not included.',
      'type'=>'string',
      'required'=>false
    )
  );
  return $params;
}

/**
 * Implement hook_form to get the Drupal admin form for an iform node.
 * @param $node
 * @param $form_state
 * @return unknown_type
 */
function iform_form(&$node, $form_state) {  
  if (isset($form_state['post'])) {
    $node = (object)($form_state['post'] + (array)$node);
  }  
  $type = node_get_types('type', $node);

  // We need to define form elements for the node's title and body.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => 0
  );
  // We want the body and filter elements to be adjacent. We could try doing
  // this by setting their weights, but another module might add elements to the
  // form with the same weights and end up between ours. By putting them into a
  // sub-array together, we're able force them to be rendered together.
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#required' => FALSE
  );
  $form['body_filter']['filter'] = filter_form($node->format);
  
  // Find the list of prebuilt forms that are available by dynamically loading the files
  $iform_list = array();
  // If this is a new node, then the default value will be "please select".
  if (!$node->iform) {
    $iform_list['-1']="Please select";
  }
  if ($dir = opendir(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/')) {
    while (false !== ($file = readdir($dir))) {
      $parts=explode('.', $file);
      if ($file != "." && $file != ".." && strtolower($parts[count($parts)-1])=='php') {
        require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$file;
        $file_tokens=explode('.', $file);
        ob_start();    
        $title = call_user_func(array('iform_'.$file_tokens[0], 'get_title'));
        ob_end_clean();
        $iform_list[$file_tokens[0]]=$title;
      }      
    }     
  }    
  closedir($dir);
  
  // Define the new form fields
  
  // The form selector has AHAH (AJAX) setup to dynamically set the form parameters.
  $form['iform'] = array(
    '#type' => 'select',
    '#title' => check_plain('indicia form'),
    '#default_value' => $node->iform,
    '#required' => TRUE,
	  '#options' => $iform_list,
    '#description' => t('Please choose an Indicia form to use on this page.'),
    '#ahah' => array(
      'path' => 'iform_parameters/js/0',
      'wrapper' => 'iform-parameters',
      'method' => 'replace',
      'effect' => 'fade',
      'event' => 'change'
    )	
  );  
  
  $form['iform_params'] = array(
    '#type' => 'fieldset',
    '#title' => t('Form parameters'),
    '#tree' => FALSE,
    '#weight' => 6
  );
  
  // Define a wrapper in which to place just the list of parameters
  $form['iform_params']['iform_params_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => 5,
    '#prefix' => '<div class="clear-block" id="iform-parameters">',
    '#suffix' => '</div>',
    '#weight' => 1
  );
  
  // Get the selected form's parameters  
  if ($node->iform && $node->iform!=-1) {
    require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$node->iform.'.php';
    ob_start();    
    $params = get_form_parameters($node);
    ob_end_clean();    
    // Convert the list of parameters into a form suitable for Drupal
    $form['iform_params']['iform_params_wrapper'] = array_merge(
      $form['iform_params']['iform_params_wrapper'],
      convert_params_array($params, $node)
    );
  } else {
    $form['iform_params']['iform_params_wrapper']['dummy'] = array(
      '#type' => 'item',
      '#value' => t('<em>Please select a form before defining parameters.</em>')
    );
  }

  return $form;
}

/**
 * Convert the array of parameters for Drupal from the list of parameters configured
 * for this Indicia form.
 * @return array Converted array.
 */
function convert_params_array($params, $node) {
  $r = array();
  $groups = array();
  $idx = 0;
  $fieldsetIdx = 0;
  foreach ($params as $param) {
    // Create an array describing the parameter to Drupal
    $type = map_type($param['type']);
    $param_def=array(
      '#type' => $type,
      '#title' => check_plain($param['caption']),
      '#description' => check_plain($param['description']),        
      '#required' => (!array_key_exists('required', $param) || $param['required']),
      '#weight' => $idx
    );
    // Only set the default_value if we have something, otherwise it can trigger an error in the checkboxes control (line 1206 of form.inc)    
    $default = $node->{$param['name']} ? $node->{$param['name']} : (array_key_exists('default', $param) ? $param['default'] : null);
    if ($default)
      $param_def['#default_value'] = $default;
    if($param['maxlength']) $param_def['#maxlength'] = $param['maxlength'];
    // Use the specified options for the select box
    if (array_key_exists('options', $param)) {
      $param_def['#options']=$param['options'];
    }
        
    // Now, place the param in the correct form fieldset
    if (array_key_exists('group', $param)) {
      // Get the group name without whitespace
      $group = str_replace(' ', '_', $param['group']);
      $group_title=$param['group'];
    } else {
      $group = 'other';
      $group_title = t('Other IForm Parameters');
    }
    // Have we already created a fieldset for this group?
    if (!array_key_exists("fieldset_$group", $r)) {
      // Create a fieldset in the Drupal form for this group
      $r["fieldset_$group"] = array(
        '#type' => 'fieldset',
        '#title' => $group_title,
        '#tree' => FALSE,
        '#weight' => $fieldsetIdx,
        '#collapsible' => true,          
        '#collapsed' => true
      );
      $fieldsetIdx++;
    }
    // Put the control in the group fieldset
    $r["fieldset_$group"][$param['name']]=$param_def;
    $idx++;
  }
  return $r;
}

/**
 * Map indicia parameter types to Drupal form field types.
 * @return unknown_type
 */
function map_type($type) {
  $mapping = array(
      'string'=>'textfield',
      'int'=>'textfield',
      'smpAttr'=>'textfield',
      'occAttr'=>'textfield',
      'termlist'=>'textfield',
      'boolean'=>'checkbox',
      'list'=>'checkboxes'
  );
  return array_key_exists($type, $mapping) ? $mapping[$type] : $type;
}

/**
 * Retreives the parameters required by an iform and creates a JSON string to store 
 * them in the database.
 * 
 * @param $node The node object containing the entered values
 * @return string JSON encoded string containing the parameter values.
 */
function get_custom_param_values($node) {
  // We need to grab the parameter values for the custom parameters that were defined by the form.  
  if ($node->iform && $node->iform!=-1) {  
    require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$node->iform.'.php';
    ob_start();    
    $params = get_form_parameters($node);
    ob_end_clean();
    $idx=0;
    $values = array();
    foreach ($params as $param) {
      $values[$param['name']] = $node->{$param['name']};
    }
    // Json encode the parameters to store them in the Drupal database.
    return json_encode($values);
  } else {
    return '';
  }
}

/**
* Implementation of hook_insert, which saves iform-specific information
* into the iform table
* @param node object
*/
function iform_insert($node) {
  $params=get_custom_param_values($node);
  db_query("INSERT INTO {iform} (nid, iform, params) VALUES (%d, '%s', '%s')", 
      $node->nid, $node->iform, $params);
}

/**
* Implementation of hook_update, which saves iform-specific information
* into an existing record in the iform table
* @param node object
*/
function iform_update($node) {   
  $params=get_custom_param_values($node);  
  db_query("UPDATE {iform} SET iform='%s', params='%s' WHERE nid=%d", $node->iform, $params, $node->nid);
}

/**
* Implementation of hook_delete, which deletes iform-specific information
* when a node is removed.
* @param node object
*/
function iform_delete($node) {   
  db_query("DELETE FROM {iform} WHERE nid=%d", $node->nid);
}

/**
* Implemenation of hook_load
* @param node object to load additional information for
* @return object with iform fields
*/
function iform_load($node) {
  $t = db_fetch_object(db_query('SELECT iform, params FROM {iform} WHERE nid = %d', $node->nid));
  $params=json_decode($t->params);
  unset($t->params);
  // Merge the params into the loaded object
  foreach($params as $k => $v) $t->$k = $v;
  return $t;
}

/**
* Implemenation of hook_menu.
*/
function iform_menu() {
  $items = array();
  // Register an ajax path which retrieves the page parameters appropriate to the selected iForm. 
  // This allows the form to dynamically generate when selecting the iForm in the drop down menu.
  $items['iform_parameters/js/%'] = array(
    'page callback' => 'get_parameters_js',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type ' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * The AHAH callback function which receieves AJAX requests for updates to the 
 * parameters for the selected Indicia form.
 * @return unknown_type
 */
function get_parameters_js() {  
  // The form is generated in an include file which we need to include manually.
  include_once 'modules/node/node.pages.inc';
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  
  $args = $form['#parameters'];
  $form_id = array_shift($args);

  // We need to process the form, prepare for that by setting a few internals.
  $form_state['post'] = $form['#post'] = $_POST;  
  unset($form['#post']['form_id']);  
  $form['#programmed'] = $form['#redirect'] = FALSE;

  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);  
  
  // This call recreates the form relying solely on the form_state that the
  // drupal_process_form set up.  
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  $params_form = $form['iform_params']['iform_params_wrapper'];
  unset($params_form['#prefix'], $params_form['#suffix']);
  $output = theme('status_messages') . drupal_render($params_form);
  
  // Final rendering callback.
  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Implementation for hook_view. Prepares the displayed data entry form.
 * @param $node
 * @param $teaser
 * @param $page
 * @return unknown_type
 */
function iform_view($node, $teaser = FALSE, $page = FALSE) {
  global $language; 
  $node = node_prepare($node, $teaser);
  if ($node->iform && $node->iform!=-1) {
    require_once drupal_get_path('module', 'iform').'/client_helpers/data_entry_helper.php';
    require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$node->iform.'.php';
    ob_start();
    // we need to grab each requested parameter from the node to pass to the form
    $params = get_form_parameters($node);
    $args = array();
    foreach ($params as $param) {
      $args[$param['name']] = $node->{$param['name']};
    }
    $r = '';
    $response = null;
    if ($_POST and (array_key_exists('website_id', $_POST))) {
      // Ask the form to submit itself
      $s = call_user_func(array('iform_'.$node->iform, 'get_submission'), $_POST, $args);
      $response = data_entry_helper::forward_post_to('save', $s);
      // Does the form redirect after success?    
      if (is_array($response) && array_key_exists('success', $response) && 
          array_key_exists('redirect_on_success', $args) && $args['redirect_on_success']) {
        $url = $args['redirect_on_success'];      
        drupal_goto($url, 'table='.$response['outer_table'].'&id='.$response['outer_id']);            
      } else {
        // This dumps errors, and/or a success message if no redirection.
        $r .= data_entry_helper::dump_errors($response);      
      }       
    }
    // link in the default stylesheet for Indicia forms
    data_entry_helper::link_default_stylesheet();
    
    // Link in the custom css file if present. Drupal skips it if missing.
    drupal_add_css(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/css/'.$node->iform.'.css');
      
    // Localise the file  
    $localFile = $node->iform.'.'.$language->language.'.php';  
    if (file_exists(drupal_get_path('module', 'iform')."/client_helpers/prebuilt_forms/lang/$localFile")) 
      require drupal_get_path('module', 'iform')."/client_helpers/prebuilt_forms/lang/$localFile";
    else {
      // If no file available in the correct language, revert to English if the file is present.
      $localFile = $node->iform.'.en.php';
      if (file_exists(drupal_get_path('module', 'iform')."/client_helpers/prebuilt_forms/lang/$localFile"))
        include drupal_get_path('module', 'iform')."/client_helpers/prebuilt_forms/lang/$localFile";
    }
    $args['language'] = $language->language;
    
    // Now retrieve the form content    
    $r .= call_user_func(array('iform_'.$node->iform, 'get_form'), $args, $node, $response);
    
    // and also add all the javascript required by the form to the HTML head. Note that any ad-hoc JS
    // is inserted at the later in the head, otherwise we can't guarantee that any plugins created won't
    // be overwritten by subsequent references to the jQuery js file added to the header by other parts of Drupal.
    handle_resources($node);
      
    ob_end_clean();
    $node->content['myfield']=array(
      '#value' => $r,
      '#weight' => 1
    );
  }
  return $node;
}

function handle_resources($node) {
  global $indicia_resources, $indicia_theme_path, $indicia_templates;
  $indicia_theme_path = drupal_get_path('module', 'iform').'/media/themes/';  
  if (isset($indicia_resources)) {
    data_entry_helper::$js_path = drupal_get_path('module', 'iform').'/media/js/';
    data_entry_helper::$css_path = drupal_get_path('module', 'iform').'/media/css/';
    $resourceList = data_entry_helper::_RESOURCES();    
    foreach ($indicia_resources as $resource)
    {       
      foreach ($resourceList[$resource]['stylesheets'] as $s)
      {        
        drupal_add_css($s);
      }
      foreach ($resourceList[$resource]['javascript'] as $j)
      {        
        // We must not add jQuery twice. So for this file, add Drupal's own version if not already done.
        if (strcasecmp(substr($j, -9), 'jQuery.js')==0)
          drupal_add_js('misc/jquery.js', 'core');          
        else if (strcasecmp(substr($j, -23), 'jquery-ui.custom.min.js')==0)
          jquery_ui_add(array('jquery-ui'));
        else if (substr($j, 0, 4)=='http') {          
          // JS file external to Drupal. add_js will not work, so insert it into the head manually.
          drupal_set_html_head("<script type='text/javascript' src='$j'></script>\n");
        } else if (strcasecmp(substr($j, -20), 'jquery-ui.effects.js')!=0) {
          // JS file within Drupal structure
          drupal_add_js($j, 'module');
        }
      }    
    }    
  }
  // If required, setup jQuery validation. We can't prep this JavaScript earlier since we would 
  // not know all the control messages. 
  // In the following block, we set the validation plugin's error class to our template.
  // We also define the error label to be wrapped in a <p> if it is on a newline.
  if (data_entry_helper::$validated_form_id) {
    data_entry_helper::$javascript .= "$('#".data_entry_helper::$validated_form_id."').validate({ 
      errorClass: \"".$indicia_templates['error_class']."\",
      ". (in_array('inline', data_entry_helper::$validation_mode) ? "\n      " : "errorElement: 'p',\n      ").
      "highlight: function(element, errorClass) {
         // Don't highlight the actual control, as it could be hidden anyway
      },
      messages: ".json_encode(data_entry_helper::$validation_messages)."
    });\n";
  }
  $script = '';
  if (!empty(data_entry_helper::$javascript) || !empty(data_entry_helper::$late_javascript)) {
    $script = "jQuery(document).ready(function() {\n".
      data_entry_helper::$javascript."\n".
      data_entry_helper::$late_javascript."\n".
      "});\n";
  }
  if (!empty(data_entry_helper::$onload_javascript)) {
    $script .= "window.onload = function() {\n".
      data_entry_helper::$onload_javascript."\n".
      "};\n"; 
  }
  if ($script) {    
    drupal_add_js($script, 'inline');    
  }
}

/**
* Implementation of hook_form_alter.
* Ensure the action of the form does not get changed to the AHAH uri during an AJAX request for iform
* parameter controls.
*/
function iform_form_alter(&$form, $form_state, $form_id) {
  if ($form['type']['#value']=='iform') {
    // Set the right #action
    if (!empty($form['nid']['#value'])) {
      $form['#action'] = url('node/'.$form['nid']['#value'].'/edit');
    }
    else {
      $form['#action'] = url('node/add/iform');
    }
  }
}