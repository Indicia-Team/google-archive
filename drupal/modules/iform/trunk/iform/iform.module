<?php
// $Id$

/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function iform_help($path, $arg) {
  $output = '';  //declare your output variable
  switch ($path) {
    case "admin/help#iform":
      $output = '<p>'.  t("Generates Indicia powered data entry forms.") .'</p>';
      break;
  }
  return $output;
} // function iform_help

/**
* Valid permissions for this module
* @return array An array of valid permissions for the iform module
*/
function iform_perm() {
  $retVal = array('access iform', 'create iform', 'edit iform', 'edit own iform');
  // Go through every IForm node.
  //   Get the particular iform, check if it has a perms method.
  //   if yes, call it and add to the return list
  $results = db_query('SELECT n.nid, i.iform FROM {iform} i, {node} n WHERE i.nid = n.nid');
  while($result = db_fetch_object($results)) {
    if ($result->iform) {
      iform_load_helpers(array('data_entry_helper'));
      require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$result->iform.'.php';
      if(method_exists('iform_'.$result->iform, 'get_perms')) {
        $perms = call_user_func(array('iform_'.$result->iform, 'get_perms'), $result->nid);
        $retVal = array_merge($retVal, $perms);
      }
    }
  }
  // Also look for then generic IForm module setting to have custom permissions for this form
  $results = db_query("SELECT n.nid, n.title FROM {iform} i, {node} n WHERE n.nid=i.nid AND (i.params like '%\"view_access_control\":1%' ".
          "OR  i.params like '%\"view_access_control\":\"1\"%')");
  while($result = db_fetch_object($results)) {
    $retVal[] = 'access iform '.$result->nid;
  }
  return $retVal;

} // function iform_perm()

/**
 * Implementation for hook_node_info.
 * Returns summary information for the content type.
 * @return array Summary information array.
 */
function iform_node_info() {
  return array(
    'iform' => array(
      'name' => t('Indicia pages'),
      'module' => 'iform',
      'description' => t("Create Indicia powered web pages, including online recording data entry forms, ".
          "reports, charts, maps and  administration pages."),
      'title_label' => t("Page title"),
      'body_label' => t("Page introductory text"),
    )
  );
} // function iform_node_info

/**
 * Implements hook_access.
 * Authentication for access to create, view and delete indicia form pages.
 * @param $op
 * @param $node
 * @param $account
 * @return unknown_type
 */
function iform_access($op, $node, $account=NULL) {
  global $user;

  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $user;
  }

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create iform', $account);
  }

  if ($op == 'view') {
    // check if this form has per-node view access control
    $results = db_query("SELECT nid FROM {iform} WHERE nid=".$node->nid." AND (params like '%\"view_access_control\":1%' ".
          "OR params like '%\"view_access_control\":\"1\"%')");
    if (db_affected_rows($results)>0) {
      // Use a per node setting to control access
      return user_access('access iform '.$node->nid, $account);
    } else {
      // Use the generic setting for Indicia forms to control access.
      return user_access('access iform', $account);
    }
  }

  // Users may have access to edit (update/delete) their own forms, or any form.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own iform', $account) && ($account->uid == $node->uid)) {
      return TRUE;
    } else {
      return user_access('edit iform', $account);
    }
  }
}

/**
 * Implement hook_form to get the Drupal admin form for an iform node.
 * @param $node
 * @param $form_state
 * @return unknown_type
 */
function iform_form(&$node, $form_state) {
  iform_load_helpers(array('form_helper'));
  if (isset($form_state['post'])) {
    $node = (object)($form_state['post'] + (array)$node);
  }
  $type = node_get_types('type', $node);

  // We need to define form elements for the node's title and body.
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => 0
  );
  // We want the body and filter elements to be adjacent. We could try doing
  // this by setting their weights, but another module might add elements to the
  // form with the same weights and end up between ours. By putting them into a
  // sub-array together, we're able force them to be rendered together.
  $form['body_filter']['body'] = array(
    '#type' => 'textarea',
    '#title' => check_plain($type->body_label),
    '#default_value' => $node->body,
    '#rows' => 10,
    '#required' => FALSE
  );
  $form['body_filter']['filter'] = filter_form($node->format);

  // Define the new form fields
  $form['iform_forms'] = array(
    '#type' => 'fieldset',
    '#title' => t('Form Selection'),
    '#tree' => FALSE,
    '#weight' => 6
  );
  $website_id=variable_get('indicia_website_id','');
  $password=variable_get('indicia_password','');
  $needWebsiteInputs = empty($website_id) || empty($password);
  if (empty($website_id))
    $website_id = isset($node->params['website_id']) ? $node->params['website_id'] : '';
  if (empty($password))
    $password = isset($node->params['password']) ? $node->params['password'] : '';
  $form['iform_forms']['picker'] = array(
    '#value' => form_helper::prebuilt_form_picker(array(
      'form' => $node->iform,
      'website_id' => $website_id,
      'password' => $password,
      'needWebsiteInputs' => $needWebsiteInputs
    ))
  );
  if ($node->iform) {
    $form['iform_forms']['form-params'] = array(
      '#value' => form_helper::prebuilt_form_params_form(array(
        'form' => $node->iform,
        'currentSettings' => $node->params,
        'readAuth' => form_helper::get_read_auth($website_id, $password)
      )),
      '#prefix' => '<div id="form-params">',
      '#suffix' => '</div>'
    );
    form_helper::enable_validation('node-form');
  } else {
    $form['iform_forms']['form-params'] = array(
      '#value' => ' ', // must be a space or Drupal drops the div
      '#prefix' => '<div id="form-params">',
      '#suffix' => '</div>'
    );
  }
  form_helper::add_resource('defaultStylesheet');
  handle_resources();
  return $form;
}

/**
 * Retrieves the parameters required by an iform and creates a JSON string to store
 * them in the database. The iform data must be in the $_POST array or in the node if
 * not in the $_POST.
 *
 * @return string JSON encoded string containing the parameter values.
 */
function get_custom_param_values($node) {
  // We need to grab the parameter values for the custom parameters that were defined by the form.
  if ($_POST['iform'] && $_POST['iform']!=-1) {
    iform_load_helpers(array('form_helper'));
    ob_start();
    $params = form_helper::get_form_parameters($_POST['iform']);
    ob_end_clean();
    $idx=0;
    $values = array();
    // always want the website id and password
    $values['website_id']=$_POST['website_id'];
    $values['password']=$_POST['password'];
    // now get the rest of the parameters
    foreach ($params as $param) {
      $values[$param['fieldname']] = $_POST[$param['fieldname']];
    }
    // Json encode the parameters to store them in the Drupal database.
    return json_encode($values);
  } else {
    return json_encode($node->params);
  }
}

/**
* Implementation of hook_insert, which saves iform-specific information
* into the iform table
* @param node object
*/
function iform_insert($node) {
  $params=get_custom_param_values($node);
  if (isset($_POST['iform']))
    $iform = $_POST['iform'];
  else
    $iform = $node->iform;
  $needs_review = isset($node->needs_review) ? $node->needs_review : 0;
  db_query("INSERT INTO {iform} (nid, iform, params, needs_review) VALUES (%d, '%s', '%s', %d)",
      $node->nid, $iform, $params, $needs_review);
}

/**
* Implementation of hook_update, which saves iform-specific information
* into an existing record in the iform table
* @param node object
*/
function iform_update($node) {
  $params=get_custom_param_values($node);
  if (isset($_POST['iform']))
    $iform = $_POST['iform'];
  else
    $iform = $node->iform;
  $needs_review = isset($node->needs_review) ? $node->needs_review : 0;
  db_query("UPDATE {iform} SET iform='%s', params='%s', needs_review=%d WHERE nid=%d",
      $iform, $params, $needs_review, $node->nid);
}

/**
* Implementation of hook_delete, which deletes iform-specific information
* when a node is removed.
* @param node object
*/
function iform_delete($node) {
  db_query("DELETE FROM {iform} WHERE nid=%d", $node->nid);
}

/**
* Implemenation of hook_load
* @param node object to load additional information for
* @return object with iform fields
*/
function iform_load($node) {
  $t = db_fetch_object(db_query('SELECT iform, params, needs_review FROM {iform} WHERE nid = %d', $node->nid));
  $params=json_decode($t->params, true);
  unset($t->params);
  $t->params = array();
  // Merge the params into the loaded object
  foreach($params as $k => $v) $t->params[$k] = $v;
  return $t;
}

/**
* Implemenation of hook_menu.
*/
function iform_menu() {
  $items = array();
  $items['admin/settings/iform'] = array(
    'title' => 'IForm',
    'description' => 'Configuration for the IForm module.',
    'page callback' => 'iform_settings',
    'access arguments' => array('create iform'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/settings/iform/settings'] = array(
    'title' => 'Settings',
    'description' => 'Settings page for the IForm module.',
    'page callback' => 'iform_settings',
    'access arguments' => array('create iform'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0
  );
  // Create a tab to display the diagnostics panel.
  $items['admin/settings/iform/diagnostics'] = array(
    'title' => 'IForm Diagnostics',
    'description' => 'Run a configuration check for the IForm module.',
    'page callback' => 'iform_diagnostics',
    'access arguments' => array('create iform'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  $items['admin/build/features/indicia'] = array(
    'title' => t('Review IForm Features'),
    'description' => t('After installing a feature containing Indicia forms, use this page to configure any '.
        'site specific settings for the forms.'),
    'page callback' => 'iform_features_review',
    'access arguments' => array('create iform'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1
  );
  return $items;
}

/**
 * Menu callback for a page which lists any site specific parameters from forms which need review.
 * @return string Form content
 */
function iform_features_review() {
  drupal_set_title(t('Review Indicia Features'));
  if (isset($_POST['form-works'])) {
    // acknowledging a form that needs review, but there are no settings to review
    db_query('UPDATE {iform} SET needs_review=1 WHERE nid=%d', $_POST['form-works']);
  } else if (isset($_POST['form-settings'])) {
    // saving site specific settings for a form. Merge the new params into the existing ones
    // and resave the node
    $node = node_load($_POST['form-settings']);
    unset($_POST['form-settings']);
    $node->params = array_merge($node->params, $_POST);
    // set node to indicate initial review done, just needs final check
    $node->needs_review=2;
    node_save($node);
  }
  iform_load_helpers(array('form_helper'));
  $forms = db_query('SELECT DISTINCT n.nid, i.iform, n.title, i.needs_review FROM {iform} i '.
      'JOIN {node} n ON n.nid=i.nid '.
      'WHERE i.needs_review>1');
  $website_id=variable_get('indicia_website_id', '');
  $password=variable_get('indicia_password', '');
  $readAuth = form_helper::get_read_auth($website_id, $password);
  $gotForms = false;
  $gotSomething = false;
  while ($row=db_fetch_array($forms)) {
    $gotSomething = true;
    $r .= '<h3>Settings for '.$row['title'].' ('.$row['iform']   .')</h3>';
    unset($form);
    // no need to do the params form if needs review < 3 - it has already been done
    if ($row['needs_review']==3)
      $form .= form_helper::prebuilt_form_params_form(array(
          'form' => $row['iform'],
          'currentSettings' => array(),
          'readAuth' => $readAuth,
          'siteSpecific' => true
      ));
    if ($form) {
      $r .= '<p>'.t('This form has site specific settings which you must check before using the form.').'</p>';
      $r .= '<form method="post" id="iform-'.$row['nid'].'">'.
          '<input type="hidden" name="form-settings" value="'.$row['nid'].'" />'.
          $form
          .'<input type="submit" value="'.t('Save Form Settings').'" /></form>';
      form_helper::enable_validation('iform-'.$row['nid']);
      $gotForms = true;
    } else {
      $r .= '<p>'.t('This form is ready to use and does not require further review. You can <a href="!pathedit" target="_blank">edit the form\'s '.
          'configuration</a> if you require advanced configuration options or <a href="!pathview" target="_blank">view the form</a> to '.
          'check if behaves as expected. Click the button below when you are happy to confirm that this form is working. '.
          'These links open in a new tab.',
          array('!pathedit' => url('node/'.$row['nid'].'/edit'), '!pathview' => url('node/'.$row['nid'].''))).'</p>';
      $r .= '<form method="post">'.
          '<input type="hidden" name="form-works" value="'.$row['nid'].'" />'.
          '<input type="submit" value="'.t('Form OK!').'" /></form>';
    }
  }
  $r .= "</form>";
  if ($gotSomething) {
    drupal_add_js('misc/collapse.js');
    if ($gotForms) {
      form_helper::add_resource('defaultStylesheet');
      handle_resources();
    }
    return $r;
  } else {
    return '<p>'.t('There are no Indicia Features pages which need review.').'</p>';
  }
}

/**
 * Menu callback that generates a page which allows iform settings to be specified.
 */
function iform_settings() {
  iform_load_helpers(array('form_helper', 'data_entry_helper'));
  data_entry_helper::enable_validation('settings-form');
  $r = '';
  if (isset($_POST['website_id'])) {
    $extraInfo = '';
    $type = 'status';
    $old_website_id=variable_get('indicia_website_id', '');
    $old_password=variable_get('indicia_password', '');
    $old_base_url=variable_get('indicia_base_url', '');
    // if any key settings have changed, invalidate the indicia cache to force new webservice calls.
    if ($old_website_id!=$_POST['website_id'] || ($old_password!=$_POST['password'] && !empty($_POST['password'])) || $old_base_url!=$_POST['base_url']) {
      data_entry_helper::clear_cache();
      $extraInfo .= t('As you have changed the information used to connect to the Indicia Warehouse, you may need to edit and reconfigure '.
          'each of your Indicia forms before they can be used again.');
      // elevate the info message
      $type = 'warning';
    }
    variable_set('indicia_website_id', $_POST['website_id']);
    // if the password is empty we leave it as it was, so we don't have to pass the password to the form.
    if (!empty($_POST['password']))
      variable_set('indicia_password', $_POST['password']);
    variable_set('indicia_base_url', $_POST['base_url']);
    variable_set('indicia_geoserver_url', $_POST['geoserver_url']);
    variable_set('indicia_geoplanet_api_key', $_POST['geoplanet_api_key']);
    variable_set('indicia_google_search_api_key', $_POST['google_search_api_key']);
    // load the new values for this page access
    helper_config::$base_url = $_POST['base_url'];
    helper_config::$geoserver_url = $_POST['geoserver_url'];
    helper_config::$geoplanet_api_key = $_POST['geoplanet_api_key'];
    helper_config::$google_search_api_key = $_POST['search_api_key'];
    drupal_set_message(t('Indicia settings saved. ').$extraInfo, $type);
  }

  $r .= "<form id=\"settings-form\"  method=\"post\">\n";
  $r .= data_entry_helper::text_input(array(
    'label' => t('Website ID'),
    'fieldname' => 'website_id',
    'class' => 'required',
    'default' => variable_get('indicia_website_id', ''),
    'helpText' => t('Please enter the ID given to your website record when your website was registered on the Indicia Warehouse. This '.
            'will be used for all the Indicia forms on your website.')
  ));
  $r .= data_entry_helper::password_input(array(
    'label' => t('Password'),
    'fieldname' => 'password',
    'helpText' => t('Please enter the password specified when your website was registered on the Indicia Warehouse. This '.
            'will be used for all the Indicia forms on your website.')
    // no default as a password field
  ));
  $r .= data_entry_helper::text_input(array(
    'label' => t('Warehouse URL'),
    'fieldname' => 'base_url',
    'class' => 'required control-width-6',
    'helpText' => t('Please enter the url of the warehouse instance you are connecting to, up to but excluding the index.php part.'),
    'default' => helper_config::$base_url
  ));
  $r .= data_entry_helper::text_input(array(
    'label' => t('GeoServer URL'),
    'fieldname' => 'geoserver_url',
    'class' => 'control-width-6',
    'helpText' => t('Please enter the url of the GeoServer instance you are connecting to for mapping services, for '.
        'example, http://localhost:8080/geoserver/ . This is optional and need not be set if you are not using '.
        'the mapping facilities provided by GeoServer. See <a href="http://code.google.com/p/indicia/wiki/GeoServerInstall">'.
        'Installing GeoServer for Indicia</a>.'),
    'default' => data_entry_helper::$geoserver_url
  ));
  $r .= data_entry_helper::text_input(array(
    'label' => t('GeoPlanet API Key'),
    'fieldname' => 'geoplanet_api_key',
    'class' => 'control-width-6',
    'helpText' => t('The Yahoo! GeoPlanet API is one option to lookup place names when you use the place search control. '.
        'It references a global database of places and returns the list of possibilities with their spatial references '.
        'to Indicia. To obtain your own API key for GeoPlanet, please visit <a href="http://developer.yahoo.com/geo/geoplanet/">'.
        'Yahoo! GeoPlanet</a>and follow the link to get an Application ID. '),
    'default' => helper_config::$geoplanet_api_key
  ));
  $r .= data_entry_helper::text_input(array(
    'label' => t('Google Search API Key'),
    'fieldname' => 'google_search_api_key',
    'class' => 'control-width-6',
    'helpText' => t('The Google Search API is a second option to lookup place names when you use the place search control. '.
        'It is also used by the Postcode textbox control to georeference postcodes you input. To obtain your own API key '.
        'for the Google Search API, please visit <a href="http://code.google.com/apis/loader/signup.html">'.
        'Google Search API</a>and follow the instructions to get an Application ID. '),
    'default' => helper_config::$google_search_api_key
  ));
  $r .= "<input type=\"submit\" value=\"Save\" />\n";
  $r .= "</form>\n";
  data_entry_helper::add_resource('defaultStylesheet');
  handle_resources();
  return $r;

}

/**
 * Implementation for hook_view. Prepares the displayed data entry form.
 * @param $node
 * @param $teaser
 * @param $page
 * @return unknown_type
 */
function iform_view($node, $teaser = FALSE, $page = FALSE) {
  if ($node->needs_review>2) {
    $r = t('This form has been added by enabling an Indicia Feature but its configuration needs to be reviewed before use. '.
        'Please contact the site administrator. '.$node->needs_review);
    $node->content['myfield']=array(
      '#value' => $r,
      '#weight' => 1
    );
    return $node;
  }
  iform_load_helpers(array('form_helper'));
  global $language;
  $node = node_prepare($node, $teaser);
  if ($node->iform && $node->iform!=-1) {
    iform_load_language_files($node);

    $args = array('language' => $language->language);

    iform_load_helpers(array('data_entry_helper'));
    require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$node->iform.'.php';
    ob_start();
    // also force the theme path to be local
    global $indicia_theme_path;
    $indicia_theme_path = drupal_get_path('module', 'iform').'/media/themes/';
    // if there is a template override file, include it
    if (file_exists(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/templates/'.$node->iform.'.php')) {
      require(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/templates/'.$node->iform.'.php');
    }
    if (file_exists(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/templates/node.'.$node->nid.'.php')) {
      require(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/templates/node.'.$node->nid.'.php');
    }
    // The form will always need to know the website id and password
    $settings_website_id=variable_get('indicia_website_id','');
    $settings_password=variable_get('indicia_password','');
    // For backward compatibility, the website ID and password can be loaded from the node params.
    $args['website_id']=empty($settings_website_id) ? $node->params['website_id'] : $settings_website_id;
    $args['password']=empty($settings_website_id) ? $node->params['password'] : $settings_password;
    // we need to grab each requested parameter from the node to pass to the form
    $params = form_helper::get_form_parameters($node->iform);

    foreach ($params as $param) {
      $args[$param['fieldname']] = $node->params[$param['fieldname']];
    }
    $r = '';
    $response = null;
    // if the form defines some remembered fields, call it from within this module rather than inside
    // indicia so it can have access to the arguments
    if (method_exists('iform_'.$node->iform, 'indicia_define_remembered_fields')) {
      call_user_func(array('iform_'.$node->iform, 'indicia_define_remembered_fields'),$args);
    }
    if ($_POST && (array_key_exists('website_id', $_POST)) && method_exists('iform_'.$node->iform, 'get_submission')) {
      // Ask the form to submit itself
      $s = call_user_func(array('iform_'.$node->iform, 'get_submission'), $_POST, $args);
      // if for some reason the iform gives back an empty submission, ignore it
      if($s){
        // does this Drupal node have any custom validation code?
        if (file_exists(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/validation/validate.'.$node->nid.'.php')) {
          require_once(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/validation/validate.'.$node->nid.'.php');
          $errors = iform_custom_validation($_POST);
          if (!empty($errors)) {
            $r .= data_entry_helper::dump_errors(array('errors'=>$errors));
          }
        }
        if (empty($errors)) {
          $response = data_entry_helper::forward_post_to('save', $s);
          // Does the form redirect after success?
          if (is_array($response) && array_key_exists('success', $response) &&
              array_key_exists('redirect_on_success', $args) && $args['redirect_on_success']) {
            $url = $args['redirect_on_success'];
            drupal_goto($url, 'table='.$response['outer_table'].'&id='.$response['outer_id']);
          } else {
            // This dumps errors, and/or a success message if no redirection.
            $r .= data_entry_helper::dump_errors($response);
          }
        }
      }
    }

    // Make buttons have a hover effect
    data_entry_helper::$javascript .= "
$('.ui-state-default').live('mouseover', function() {
  $(this).addClass('ui-state-hover');
});
$('.ui-state-default').live('mouseout', function() {
  $(this).removeClass('ui-state-hover');
});\n";

    // Now retrieve the form content
    try {
      $r .= call_user_func(array('iform_'.$node->iform, 'get_form'), $args, $node, $response);
    } catch (Exception $e) {
      watchdog('debug', 'Error occurred loading form');
      watchdog('debug', $e->getMessage());
      $r =  $e->getMessage();
    }

    // and also add all the javascript required by the form to the HTML head. Note that any ad-hoc JS
    // is inserted at the later in the head, otherwise we can't guarantee that any plugins created won't
    // be overwritten by subsequent references to the jQuery js file added to the header by other parts of Drupal.
    handle_resources();

    // Link in the default site css
    drupal_add_css(drupal_get_path('module', 'iform').'/media/css/default_site.css');

    // Link in the custom css file if present. Drupal skips it if missing.
    drupal_add_css(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/css/'.$node->iform.'.css');
    drupal_add_css(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/css/node.'.$node->nid.'.css');

    // Link in the form's custom js file if present.
    if (file_exists(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/js/'.$node->iform.'.js'))
      drupal_add_js(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/js/'.$node->iform.'.js');
    // Link in the specific node's custom js file if present.
    if (file_exists(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/js/node.'.$node->nid.'.js'))
      drupal_add_js(drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/js/node.'.$node->nid.'.js');

    ob_end_clean();
    $node->content['myfield']=array(
      '#value' => $r,
      '#weight' => 1
    );
  }
  return $node;
}

function handle_resources() {
  if (isset(data_entry_helper::$required_resources)) {
    $resourceList = data_entry_helper::get_resources();
    foreach (data_entry_helper::$required_resources as $resource)
    {
      if (isset($resourceList[$resource]['stylesheets'])) {
        foreach ($resourceList[$resource]['stylesheets'] as $s) {
          $s = preg_replace('/^'.str_replace('/', '\/', base_path()).'/', '', $s);
          drupal_add_css($s);
        }
      }
      if (isset($resourceList[$resource]['javascript'])) {
        foreach ($resourceList[$resource]['javascript'] as $j) {
          // We must not add jQuery twice. So for this file, add Drupal's own version if not already done.
          if (strcasecmp(substr($j, -9), 'jQuery.js')==0)
            drupal_add_js('misc/jquery.js', 'core');
          else if (strcasecmp(substr($j, -23), 'jquery-ui.custom.min.js')==0)
            jquery_ui_add(array('jquery-ui'));
          else if (substr($j, 0, 4)=='http') {
            // JS file external to Drupal. add_js will not work, so insert it into the head manually.
            drupal_set_html_head("<script type='text/javascript' src='$j'></script>");
          } else if (strcasecmp(substr($j, -20), 'jquery-ui.effects.js')!=0) {
            // JS file within Drupal structure. Drupal will add base_path() to the beginning as it expects a relative path not absolute
            $j = preg_replace('/^'.str_replace('/', '\/', base_path()).'/', '', $j);
            drupal_add_js($j, 'module');
          }
        }
      }
    }
  }
  data_entry_helper::setup_jquery_validation_js();
  $script = '';
  if (!empty(data_entry_helper::$javascript) || !empty(data_entry_helper::$late_javascript)) {
    $script = "if (typeof indiciaData==='undefined') { indiciaData = {}; }\n";
    $script .= "indiciaData.windowLoaded=false;\n";
    $script .= "jQuery(document).ready(function() {\n".
      data_entry_helper::$javascript."\n".
      data_entry_helper::$late_javascript."\n".
      "});\n";
  }
  if (!empty(data_entry_helper::$onload_javascript)) {
    $script .= "window.onload = function() {\n".
      data_entry_helper::$onload_javascript."\n".
      "indiciaData.windowLoaded=true;\n".
      "};\n";
  }
  if ($script) {
    drupal_add_js($script, 'inline');
  }
  // clear the scripts incase we load 2 iform nodes onto 1 page.
  data_entry_helper::$javascript = '';
  data_entry_helper::$late_javascript = '';
  data_entry_helper::$onload_javascript = '';
}

/**
* Implementation of hook_form_alter.
* Ensure the action of the form does not get changed to the AHAH uri during an AJAX request for iform
* parameter controls.
*/
function iform_form_alter(&$form, $form_state, $form_id) {
  if ($form['type']['#value']=='iform') {
    // Set the right #action
    if (!empty($form['nid']['#value'])) {
      $form['#action'] = url('node/'.$form['nid']['#value'].'/edit');
    }
    else {
      $form['#action'] = url('node/add/iform');
    }
  }
}

/**
 * Menu callback that generates a page which outputs a diagnostics check for the IForm module.
 */
function iform_diagnostics() {
  iform_load_helpers(array('data_entry_helper'));
  return data_entry_helper::system_check();
}

/**
 * Loads language files defined for the form. This includes language files defined in the module folder or in the site specific
 * Drupal folders, and also includes files named with the form name or node nid.
 */
function iform_load_language_files($node) {
  global $language, $custom_terms, $custom_term_overrides;
  $moduleLangFilePath = drupal_get_path('module', 'iform')."/client_helpers/prebuilt_forms/lang/";
  $siteSpecificLangFilePath = file_create_path("iform/client_helpers/prebuilt_forms/lang/");
  $formLangFileName = $node->iform.'.'.$language->language.'.php';
  $nodeLangFileName = 'node.'.$node->nid.'.'.$language->language.'.php';
  $formFallbackFileName = $node->iform.'.en.php';
  // Define a priority ordered list of file names that could contain the custom terms list.
  if ($siteSpecificLangFilePath)
    $langFiles = array(
      $siteSpecificLangFilePath . $nodeLangFileName,
      $siteSpecificLangFilePath . $formLangFileName,
      $siteSpecificLangFilePath . $formFallbackFileName
    );
  else
    $langFiles=array();
  $langFiles = array_merge($langFiles, array(
    $moduleLangFilePath       . $nodeLangFileName,
    $moduleLangFilePath       . $formLangFileName,
    $moduleLangFilePath       . $formFallbackFileName
  ));
  $custom_terms=array(); // this is an array of key value pairs
  $custom_term_overrides=array(); // this is an array with each item a subarray of key value pairs.
  // start at the highest priority possible language file name and loop through until we find one that defines the set of custom terms.
  foreach ($langFiles as $langFile) {
    if (file_exists($langFile))
      // Found a file to include. It might define custom_terms, or might define an entry in the custom_term_overrides array
      require $langFile;
    // finish when we have loaded an array of custom terms.
    if (count($custom_terms)>0) break;
  }
  // if there are any custom term overrides, they need to be merged into custom terms in reverse priority order.
  $custom_term_overrides = array_reverse($custom_term_overrides);
  foreach ($custom_term_overrides as $override_list) {
    $custom_terms=array_merge($custom_terms, $override_list);
  }
}

/**
 * Method to load an array of helper classes. Also overrides any helper config settings
 * for those classes from drupal variable settings.
 * @param array $files List of helper class names to load.
 */
function iform_load_helpers(array $files) {
  $path = drupal_get_path('module', 'iform').'/client_helpers';
  // we always need the helper_config file
  if (!class_exists('helper_config')) {
    require_once("$path/helper_config.php");
    // now we have an opportunity to load settings into helper_config from the drupal variables.
    helper_config::$base_url = variable_get('indicia_base_url',helper_config::$base_url);
    helper_config::$geoserver_url = variable_get('indicia_geoserver_url',helper_config::$geoserver_url);
    // upload_path
    // cache_folder
    // interim_image_folder
    // final_image_folder
    // indicia_upload_path
    // max_upload_size
    helper_config::$geoplanet_api_key = variable_get('indicia_geoplanet_api_key',helper_config::$geoplanet_api_key);
    helper_config::$google_search_api_key = variable_get('indicia_google_search_api_key',helper_config::$google_search_api_key);
    // $google_api_key ignored because won't be required in v3.
    // $multimap_api_key ignored because layers are deprecated in favour of Bing.
    // $bing_api_key to be added
    helper_config::$flickr_api_key = variable_get('indicia_flickr_api_key',helper_config::$flickr_api_key);
    helper_config::$flickr_api_secret = variable_get('indicia_flickr_api_secret',helper_config::$flickr_api_secret);
  }
  foreach ($files as $file)
    require_once "$path/$file.php";
  // ensure css and js is loaded locally
  helper_base::$js_path = base_path() . drupal_get_path('module', 'iform').'/media/js/';
  helper_base::$css_path = base_path() . drupal_get_path('module', 'iform').'/media/css/';
}

/**
 * Implementation of hook_init.
 * Disable Drupal caching for iforms, since this prevents authorisation tokens being refreshed required for Warehouse access.
 */
function iform_init() {
  $node = menu_get_object();
  if ($node->type == 'iform') {
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Hook for rendering an exported node into a feature. By setting needs_review we flag
 * the node up so the user knows to check the node configuration.
 */
function iform_uuid_node_features_export_render_alter(&$export, $node, $module) {
  if ($node->type=='iform') {
    $export->needs_review = 3;
  }
}