<?php
// $Id$

/**
 * @file 
 * Adds username/password to map accesses.
 * @package iform_proxy
 */
 
define('IFORM_PROXY_PATH', variable_get('iform_proxy_path', 'proxy'));
 
/* -----------------------------------------------------------------

 Hook Implementations 

------------------------------------------------------------------ */

/**
 * Implementation of hook_perm();
 */
function iform_proxy_perm() {
  return array('IForm Proxy admin', 'IForm Proxy passthrough');
}
                                 
/**
 * Implementation of hook_menu().
 */  
function iform_proxy_menu(){
 $items = array();
 
  $items[IFORM_PROXY_PATH] = array(
     'title' => 'Redirecting to your destination',
     'page callback' => 'iform_proxy_proxy',
     'access arguments' => array('access content'),
     'type' => MENU_CALLBACK,
  );  
  $items['admin/settings/iform_proxy'] = array(
    'title' => 'IForm Proxy',
    'description' => 'Main settings for IForm Proxy.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iform_proxy_admin_settings'),
    'access arguments' => array('IForm Proxy admin'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/settings/iform_proxy/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  return $items;
}

/**
 * Menu callback; displays the iform proxy module settings page.
 *
 * @see system_settings_form()
 */
function iform_proxy_admin_settings() {

  // Define Form
  $form['iform_proxy_username'] = array(
    '#type' => 'textfield',
    '#title' => t('IForm Proxy Service Account Username'),
    '#default_value' => variable_get('iform_proxy_username', '')
  );
  $form['iform_proxy_password'] = array(
    '#type' => 'textfield',
    '#title' => t('IForm Proxy Service Account Password'),
    '#default_value' => variable_get('iform_proxy_password', '')
  );

  // Make a system setting form and return
  return system_settings_form($form);
}
 
/* -----------------------------------------------------------------

 Public API 

------------------------------------------------------------------ */
 
/**
 * Proxy the URL passed.
 * 
 * @param string $url
 * 
 * @param array $options
 * 
 * @return string
 *   A re-built URL ready to be used in place of the provided url.
 * 
 * @see iform_proxy_redirect()
 */
function iform_proxy_url($url, $options = array()) {
  
  // Build URL     
  $u = url(IFORM_PROXY_PATH, array('absolute' => TRUE,
  		query => array('url' => $url,
						'referer' => request_uri())));
  $u .= (!empty($options) ? '&' . drupal_query_string_encode((array) $options) : '');   
  return $u; 
}

/**
 * Redirect to the URL passed.
 * 
 * Generally you would not call this function, simply use
 * iform_proxy_url() to create the proxied URLs. However if you must
 * you can also programatically invoke the proxies via this function.
 * 
 * @param string $url
 * 
 * @param array $options
 * 
 * @see iform_proxy_url() 
 */
function iform_proxy_redirect($url, $options = array()) {
  // Fix scheme if needed
  // Currently supports http only
  if (strpos($url, 'http://') !== 0){
    $url = 'http://' . $url;
  }  

	if(!user_access('IForm Proxy passthrough')) {
		return;
	}
    $user = check_plain(variable_get('iform_proxy_username', ''));
    $password = check_plain(variable_get('iform_proxy_password', ''));
	foreach($options as $key => $value){
		switch($key) {
			case 'referer' :
			case 'url' :
				break;
			default :
				$url=$url.(strstr($url, "?") ? "&" : "?").$key."=".$value;
		}
	}
    $session = curl_init($url);
    // Set the POST options.
    $httpHeader = array();
    //curl_setopt($session, CURLOPT_POST, 1);
    if ($user != null && strlen($user)>0 && $password != null && strlen($password)>0) {
      $httpHeader[]='Authorization: Basic '.base64_encode($user.':'.$password);
    }
    if (count($httpHeader)>0) {
      curl_setopt($session, CURLOPT_HTTPHEADER, $httpHeader);
    }

    curl_setopt($session, CURLOPT_HEADER, true);
    curl_setopt($session, CURLOPT_RETURNTRANSFER, true);

    // Do the POST and then close the session
    $response = curl_exec($session);
    if (curl_errno($session) || strpos($response, 'HTTP/1.1 200 OK')===false) {
      echo 'cUrl request failed. Please check cUrl is installed on the server.';
      if (curl_errno($session))
        echo 'Error number: '.curl_errno($session).'';
      echo "Server response ";
      echo $response;
    } else {
      $offset = strpos($response, "\r\n\r\n");
      $headers = curl_getinfo($session);
// TODO COPY OVER HEADERS
//      if (strpos($headers['content_type'], '/')!==false) {
//        $fileType = array_pop(explode('/',$headers['content_type']));
//        JResponse::setHeader( 'Content-Disposition', 'attachment; filename=download.'.$fileType );
//      }
//      $document->setMimeEncoding($headers['content_type']);
//      if (array_key_exists('charset', $headers)) {
//        $document->setCharset($headers['charset']);
//      } else {
//        $document->setCharset(null);
//      }
      // last part of response is the actual data
      echo array_pop(explode("\r\n\r\n", $response));
    }
    curl_close($session);
  
}

/**
 * Constructs proxy redirection based on the current path.
 * this is the function called when a request comes through the proxy.
 * 
 * @see iform_proxy_redirect()
 */
function iform_proxy_proxy() {
  // Not a proxied path
  if (arg(0) != IFORM_PROXY_PATH){
    return;
  }
  
  // Build url, options, and module from path
  $url = isset($_GET['url']) ? $_GET['url'] : NULL;
  $options = $_GET;    
                              
  // Sanity check
  if (empty($url)){      
    watchdog('iform_proxy', 'Failed to redirect user.');
    drupal_set_message(t('URL redirection is currently unavailable, please contact an administrator.'));
    // If they tampered with referer... thats just to bad for them 
    drupal_goto($_GET['referer']);
  }
  
  unset($options['q'], $options['url']);
  
  // Redirect and resume the processing phase
  iform_proxy_redirect($url, $options);
}


