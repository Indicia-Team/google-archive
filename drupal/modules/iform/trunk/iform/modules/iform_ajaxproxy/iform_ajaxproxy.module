<?php
// $Id$

/**
 * @file 
 * Adds write authentication to Inidica Ajax accesses, and wraps the post into the required format.
 * @package iform_ajaxproxy
 */
 
define('IFORM_AJAXPROXY_PATH', variable_get('iform_ajaxproxy_path', 'ajaxproxy'));
 
/* -----------------------------------------------------------------

 Hook Implementations 

------------------------------------------------------------------ */

/**
 * Implementation of hook_perm();
 */
function iform_ajaxproxy_perm() {
  return array('IForm AJAX Proxy passthrough');
}
                                 
/**
 * Implementation of hook_menu().
 */  
function iform_ajaxproxy_menu(){
 $items = array();
 
  $items[IFORM_AJAXPROXY_PATH] = array(
     'title' => 'Redirecting to your destination',
     'page callback' => 'iform_ajaxproxy_proxy',
     'access arguments' => array('access content'),
     'type' => MENU_CALLBACK,
  ); 

  return $items;
}


/* -----------------------------------------------------------------

 Public API 

------------------------------------------------------------------ */
 
/**
 * Provide a URL to be used for AJAX requests.
 * 
 * @node string $url
 * 
 * @index integer|string array index used to define how to process the post into an indicia format.
 * 
 * @return string
 *   A ready to be used url.
 * 
 * @see iform_proxy_redirect()
 */
function iform_ajaxproxy_url($node, $index) {
  
  // Build URL     
  $u = url(IFORM_AJAXPROXY_PATH, array('absolute' => TRUE,
  		query => array('node' => $node->nid,
						'index' => $index)));
  return $u; 
}

/**
 * Constructs proxy redirection based on the iform node.
 * this is the function called when a request comes through the proxy.
 * 
 */
function iform_ajaxproxy_proxy() {
  require_once drupal_get_path('module', 'iform') .'/client_helpers/data_entry_helper.php';

  // Not a proxied path
  if (arg(0) != IFORM_AJAXPROXY_PATH || !user_access('IForm AJAX Proxy passthrough') || !$_POST) {
    echo "{error:\"Code 1\"}";
	return;
  }
  $nid = isset($_GET['node']) ? $_GET['node'] : NULL;
  $index = isset($_GET['index']) ? $_GET['index'] : NULL;                           
  // Sanity check
  if (empty($nid) || empty($index)){
    // TODO? echo a failure response: invocation format invalid
    echo "{error:\"Code 2\"}";
    return;
  }  
  $node = node_load($nid);
  if($node->type != 'iform') {
    // TODO? echo a failure response: invalid node type
    echo "{error:\"Code 3\"}";
    return;
  }
  // form type is held in $node->iform, but not relevant at this point.
  //    require_once drupal_get_path('module', 'iform').'/client_helpers/prebuilt_forms/'.$node->iform.'.php';
  // will have a $node->website_id and $node->password.    
  $postargs = "website_id=".$node->website_id;
  $response = data_entry_helper::http_post(data_entry_helper::$base_url.'/index.php/services/security/get_nonce', $postargs, false);
  $nonce = $response['output'];
  if(!array_key_exists('website_id', $_POST)){
    // TODO? echo a failure response: website id not provided in POST
    echo "{error:\"Code 4\"}";
    return;
  }
  if($_POST['website_id'] != $node->website_id){
    // TODO? echo a failure response: website id mismatch
    echo "{error:\"Code 5\"}";
    return;
  }
  switch ($index) {
    case "sample":
        $Model = data_entry_helper::wrap_with_attrs($_POST, 'sample');
        break;
    case "loc-sample":
        $structure = array(
        	'model' => 'location',
        	'subModels' => array(
          		'sample' => array('fk' => 'location_id')
	        )
	    );
	    if(array_key_exists('locations_website:website_id', $_POST)){
	    	$structure['subModels']['locations_website'] = array('fk' => 'location_id');
	    }
	    $Model = data_entry_helper::build_submission($_POST, $structure);
        break;
    case "loc-smp-occ":
        $structure = array(
        	'model' => 'sample',
        	'subModels' => array(
          		'occurrence' => array('fk' => 'sample_id')
	        ),
        	'superModels' => array(
          		'location' => array('fk' => 'location_id')
	        )
	    );
	    $Model = data_entry_helper::build_submission($_POST, $structure);
	    foreach($_POST as $key=>$value){
	    	if(substr($key,0,14) == 'determination:'){
			    $Model['subModels'][0]['model']['subModels'][] = array(
					'fkId' => 'occurrence_id',
					'model' => data_entry_helper::wrap($_POST, 'determination', 'determination')
			    );
 	    		break;
	    	}
	    }
        break;
    case "media":
    	// media handled differently. Submission is handled by the handle_media function.
        // hardcode the auth into the $_Post array
    	$_POST['auth_token'] = sha1($nonce.":".$node->password);
		$_POST['nonce'] = $nonce;    	
        // The response from handle_media has been updated to be json encoded.
        $response = submission_builder::handle_media('upload_file');
        echo json_encode($response);
        return;
    case "occurrence":
        $structure = array('model' => 'occurrence');
	    // Only include determination record if determination in post
	    foreach($_POST as $key=>$value){
	    	if(substr($key,0,14) == 'determination:'){
	    		$structure['subModels'] = array('determination' => array('fk' => 'occurrence_id'));
	    		break;
	    	}
	    }
	    $Model = data_entry_helper::build_submission($_POST, $structure);
    	break;
    case "occ-comment":
        $Model = data_entry_helper::wrap($_POST, 'occurrence_comment');
    	break;
    case "smp-comment":
        $Model = data_entry_helper::wrap($_POST, 'sample_comment');
    	break;
    case "determination":
        $Model = data_entry_helper::wrap($_POST, 'determination');
    	break;
    default:
    	var_dump($_POST);
    	var_dump($_FILES);
    	// TODO invoke optional method in relevant iform prebuilt form to handle non standard indexes
    	// TODO? echo a failure response: invalid index type
    	return;
  }
  // 
  $request = data_entry_helper::$base_url."/index.php/services/data/save";
  $postargs = 'submission='.json_encode($Model);
  $postargs .= '&auth_token='.sha1($nonce.":".$node->password);
  $postargs .= '&nonce='.$nonce;
  $postresponse = data_entry_helper::http_post($request, $postargs, false);
  // the response array will always feature an output, which is the actual response or error message.
  $response = $postresponse['output'];
  // if it is not json format, assume error text, and json encode that.
  if (!json_decode($response, true))
      $response = "{error:\"".$response."\"}";
  echo $response;
}


