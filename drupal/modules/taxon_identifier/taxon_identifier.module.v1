<?php
// $Id: $

/**
 * @file
 * Defines taxon identifier field types for CCK, including taxon version keys and BRC codes.
 */
 
/**
 * An enumeration of field types, just to make the code more readable.
 */
class IdTypes {
  // Taxon Version Key
  const TVK = 0;
  // Recommended Taxon List Item Key
  const RTLIK = 1;
  // BRC Code
  const BRC = 2;
}

/**
 * Implementation of hook_theme().
 */
function taxon_identifier_theme() {
  return array(
    'taxon_identifier_textfield' => array(
      'arguments' => array('element' => NULL),
    ),
    'taxon_identifier_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function taxon_identifier_field_info() {
watchdog('ti', 'taxon_identifier_field_info');
  return array(
    'taxon_identifier' => array(
      'label' => t('Taxon Identifier'),
      'description' => t('Store taxon identifiers in the database.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function taxon_identifier_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $options = array(IdTypes::TVK => t('Taxon Version Key'), IdTypes::RTLIK => t('Recommended Taxon List Item Key'), IdTypes::BRC => t('BRC Code'));
      $form['id_type'] = array(
        '#type' => 'radios',
        '#title' => t('ID Type'),
        '#default_value' => is_numeric($field['id_type']) ? $field['id_type'] : 0,
        '#options' => $options,
      );
      return $form;

    case 'save':
      return array('id_type');

    case 'database columns':
      if ($field['type'] == 'taxon_identifier') {
        if (is_numeric($field['id_type']) && $field['id_type']==IdTypes::BRC) {
          // BRC code has 2 parts
          // @todo: How long are these fields?
          $columns['value_1'] = array('type' => 'varchar', 'length' => 16, 'not null' => FALSE, 'sortable' => TRUE, 'views' => TRUE);
          $columns['value_2'] = array('type' => 'varchar', 'length' => 16, 'not null' => FALSE, 'sortable' => TRUE, 'views' => TRUE);
        } else {
          $columns['value'] = array('type' => 'char', 'length' => 16, 'not null' => FALSE, 'sortable' => TRUE, 'views' => TRUE);
        }
        $columns['id_type'] = array('type' => 'int', 'unsigned' => TRUE, 'not null' => FALSE, 'views' => FALSE);
        return $columns;
      }
    case 'views data':
      $allowed_values = content_allowed_values($field);
      if (count($allowed_values)) {
        $data = content_views_field_views_data($field);
        $db_info = content_database_info($field);
        $table_alias = content_views_tablename($field);

        // Filter: Add a 'many to one' filter.
        $copy = $data[$table_alias][$field['field_name'] .'_value'];
        $copy['title'] = t('@label (!name) - Allowed values', array('@label' => t($field['widget']['label']), '!name' => $field['field_name']));
        $copy['filter']['handler'] = 'content_handler_filter_many_to_one';
        unset($copy['field'], $copy['argument'], $copy['sort']);
        $data[$table_alias][$field['field_name'] .'_value_many_to_one'] = $copy;
        // Argument : swap the handler to the 'many to one' operator.
        $data[$table_alias][$field['field_name'] .'_value']['argument']['handler'] = 'content_handler_argument_many_to_one';
        return $data;
      }
  }
}

/**
 * Implementation of hook_field(). 
 * Defines behaviour of the field, including validation in our case.
 */
function taxon_identifier_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
          switch ($item['id_type']) {
            case IdTypes::TVK:
            case IdTypes::RTLIK:
              // TVK and TLIKs must be valid 16 character NBN keys, 0-9+A-Z only. Or null...
              if (!empty($item)) {
                // check length is 16 characters                
                if (drupal_strlen($item['value']) != 16) {
                  form_set_error($error_element, t('%name: the value must be 16 characters long.', array('%name' => $field['widget']['label'])));
                }
                // check 0-9A-Z only
                if (!preg_match('/^[0-9,A-Z]$/', $item['value'])) {
                  form_set_error($error_element, t('%name: the value consist of characters 0-9 and A-Z only.', array('%name' => $field['widget']['label'])));
                }
              }
              break;            
            case IdTypes::BRC:
              // @todo BRC code validation
              break;            
          }
        }
      }
      return $items;
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function taxon_identifier_content_is_empty($item, $field) {
  switch ($item['id_type']) {
    case IdTypes::TVK:
    case IdTypes::RTLIK:
      if (empty($item['value']) && (string)$item['value'] !== '0') {
        return TRUE;
      }
      return FALSE;
    case IdTypes::BRC:
      if (empty($item['value_1']) && (string)$item['value_1'] !== '0' && empty($item['value_2']) && (string)$item['value_2'] !== '0') {
        return TRUE;
      }
      return FALSE;
  }
}

/**
 * Implementation of hook_field_formatter_info().
 */
function taxon_identifier_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('taxon_identifier'),
      'multiple values' => CONTENT_HANDLE_CORE,
    )
  );
}

/**
 * Theme function for 'default' text field formatter.
 */
function theme_taxon_identifier_formatter_default($element) {
switch ($item['id_type']) {
    case IdTypes::TVK:
    case IdTypes::RTLIK:
      return $element['#item']['value'];
    case IdTypes::BRC:
      return $element['#item']['value_1'].'.'.$element['#item']['value_2'];
  }    
}

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function taxon_identifier_textfield_widget_info() {
watchdog('ti', 'taxon_identifier_textfield_widget_info');
  return array(
    'taxon_identifier' => array(
      'label' => t('Text field'),
      'field types' => array('taxon_identifier'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    )
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function taxon_identifier_textfield_elements() {
watchdog('ti', 'taxon_identifier_textfield_elements');
  return array(
    'taxon_identifier' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('taxon_identifier_process'),
      '#autocomplete_path' => FALSE,
    )
  );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function taxon_identifier_widget(&$form, &$form_state, $field, $items, $delta = 0) {
watchdog('ti', 'taxon_identifier_widget. '. print_r($field, true));
  if ($field['id_type']==IdTypes::BRC) {
    $element['outer'] = array(
      '#type' => 'fieldset',
      '#title' => $field['widget']['label']
    );
    $element['outer']['v1'] = array(
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    );
    $element['outer']['v2'] = array(
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    );
  } else {
    $element = array(
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    );
  }
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function taxon_identifier_process($element, $edit, $form_state, $form) {
watchdog('ti', 'taxon_identifier_textfield_process');
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#autocomplete_path' => $element['#autocomplete_path'],
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'text'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );

  return $element;
}

/**
 * FAPI theme for an individual text elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_taxon_identifier_textfield($element) {
  return $element['#children'];
}


/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function taxon_identifier_widget_info() {
  return array(
    'taxon_identifier' => array(
      'label' => t('Text field'),
      'field types' => array('taxon_identifier'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    )
  );
}