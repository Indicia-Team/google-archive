<?php
// $Id$

/**
* Implement hook_taxon_formatter_types
*/
function nbn_map_taxon_formatter_types() {
  $formatter = array(
    'nbn_map' => array(
      'title' => t('NBN Map'),
      // field type is tvk, tlick or brc (+GBIF?)
      'field_type' => 'tvk',
      // function that generates the form using Forms API, with arguments for the current settings values, type name (e.g. nbn_map) and optional $args
      'form_callback' => 'nbn_map_taxon_formatter_settings_form',
      'form_args' => array() // can be used to pass arguments to the form
    )
  );
  return $formatter;
}

/**
 * This defines the drupal form used for the settings of this formatter type.
 */
function nbn_map_taxon_formatter_settings_form($settings, $type, $args) {
  if ($type=='nbn_map') {
    // apply some defaults
    $settings = array_merge(array(
      'width' => 200,
      'height' => 300
    ), $settings);
    $form = array();
    $form['registration'] = array(
      '#type' => 'textfield',
      '#title' => t('Registration Key'),
      '#description' => str_replace('{0}', 'http://www.nbn.org.uk/Guidebooks/Web-services-documentation/Resources/registration.aspx', t('NBN Web Services registration key, see <a href="{0}">'.
          'Registration of Web Service Clients</a> for more information.')),
      '#required' => TRUE,
      '#default_value' => $settings['registration']
    );
    // @todo validate width and height
    $form['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width (px)'),
      '#description' => t('Width of the map in pixels.'),
      '#required' => TRUE,
      '#default_value' => $settings['width']
    );
    $form['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height (px)'),
      '#description' => t('Height of the map in pixels.'),
      '#required' => TRUE,
      '#default_value' => $settings['height']
    );
    $form['caching'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable caching'),
      '#description' => t('Cache images locally in the Drupal files folder for better performance.'),
      '#default_value' => $settings['caching']
    );
    $form['datasets'] = array(
      '#type' => 'textarea',
      '#title' => t('Datasets'),
      '#description' => t('List the keys of the datasets to restrict the query to one per line, or leave blank for no dataset filter.'),
      '#required' => FALSE,
      '#default_value' => $settings['datasets'],
      '#wysiwyg' => FALSE
    );
    $form['bands'] = array(
      '#type' => 'textarea',
      '#title' => t('Display Bands'),
      '#description' => t('List display bands one per line to define the fill and border colour of the output by date range, or leave blank for just the default band. '.
          'Each band line consists of a comma separated list of the settings (from, to, fill and border). The from and to values are 4 digit years, the fill and border '.
          'values are RGB colour codes. For example "from=1980,to=1990,fill=FF0000,border=000000".'),
      '#required' => FALSE,
      '#default_value' => $settings['bands'],
      '#wysiwyg' => FALSE
    );
    $form['region'] = array(
      '#type' => 'select',
      '#title' => t('Region'),
      '#description' => t('Select the region to be displayed for the map.'),
      '#required' => TRUE,
      '#options' => array(
        'GBIreland'=>'Displays Britain and Irish coastline and records',
        'Ireland'=>'Zooms the map to Ireland, only Irish records display',
        'GB'=>'Display the British coastline only. Any Irish records will still display.'       
      ),
      '#default_value' => $settings['region']
    );
    $form['vice_county'] = array(
      '#type' => 'textfield',
      '#title' => t('Vice County Number'),
      '#description' => t('Select a vice county number to zoom the map to, or leave blank. This only zooms the map, it does not filter the records. '.
          'The region setting above must be correct or the vice county number is ignored.'),
      '#required' => FALSE,
      '#default_value' => $settings['vice_county']
    );
    $form['resolution'] = array(
      '#type' => 'select',
      '#title' => t('Resolution'),
      '#description' => t('Displayed square size for distribution points.'),
      '#required' => TRUE,
      '#options' => array(
        '10km'=>'10km', 
        '2km'=>'2km'        
      ),
      '#default_value' => $settings['resolution']
    );
    $form['background'] = array(
      '#type' => 'select',
      '#title' => t('Background'),
      '#description' => t('Select the background layer to display.'),
      '#required' => TRUE,
      '#options' => array(
        'None'=>'Outline only',
        'OSMap'=>'Ordnance Survey map',
        'ViceCounty'=>'Watsonian vice county boundaries.'       
      ),
      '#default_value' => $settings['background']
    );
  }
  return $form;
}

/**
 * Implements the output theme function.
 * @todo Theming
 * @todo NBN map web service integration
 * @todo caching option
 */
function theme_nbn_map_taxon_formatter_output($element, $preset) {
  // return nothing if no TVK.
  $tvk = trim($element['#item']['safe_value']);
  if (empty($tvk))
    return '';
  require_once(drupal_get_path('module','taxon_formatters').'/lib/nusoap.php');
  if ($preset['settings']['caching']) {
    $base_path = file_directory_path()."/nbn_maps";
    if (!file_exists($base_path)) {
      mkdir($base_path, 0777);
    }
    $image_name = "$tvk-".$preset['presetid'].'.jpg';
    $image_path = $base_path."/".$image_name;
  }
  if ($preset['settings']['caching'] && ($cache = cache_get("nbn_map:$tvk")) && file_exists($image_path)) {
    // everything we need is in the cache and images folder
    return theme('nbn_map_output', base_path().$image_path, $cache->data, $preset);
  }
  try {
    $client = new nusoap_client('http://www.nbnws.net/ws_3_5/GatewayWebService?WSDL', true);
  }
  catch(Exception $e) {
    $result = "<h4>The NBN Web Service is unavailable.<h4>";
    $result .= "FAULT:  <p>Code: {$e->faultcode} >br />";
    $result .=  "String: {$e->getMessage} </p>";
    return $result;
  }
  $query = nbn_map_build_query($element, $preset);
  try {
    $response =  $client->call("GetGridMap", $query);	
  } catch (Exception $e) {
    $result = "<h4>The NBN Web Service did not respond.<h4>";
    $result .= "FAULT:  <p>Code: {$e->faultcode} <br />";
    $result .=  "String: {$e->getMessage} </p>";	
    return $result; 
  }
  // log any failures
  if (!isset($response['Map']))
    watchdog('nbn_map', 'Failed response from an NBN map service request:'.print_r($response, true));
  // the faultstring is probably useful to users
  if (isset($response['faultstring']))
    return $response['faultstring'];
  // in case it has all gone wrong...
  if (!isset($response['Map']))
    return t('The NBN Gateway map could not be displayed. More information is in the log.');
  // should be OK and have a map now.
  $map = $response['Map'];
  if ($preset['settings']['caching']) {
    // cache the whole response
    cache_set("nbn_map:$tvk", $response);
    // Now we have a remote image URL, copy it locally
    $remote_image = file_get_contents($map['Url']) or die('Could not grab the file');
    $local_image  = fopen($image_path, 'w+') or die('Could not create the file');

    fputs($local_image, $remote_image) or die('Could not write to the file');
    fclose($local_image);    
    unset($remote_image);
    // create a full path to the local image we just copied over
    $image_path = base_path() . $image_path;
  } else {
    // no caching, so refer to the remote map image
    $image_path = $map['Url'];
  }
  return theme('nbn_map_output', $image_path, $response, $preset);
}

/**
 * Theme function that creates the final map output with NBN attribution.
 */
function theme_nbn_map_output($image_path, $response, $preset) {
  $result = '<div style="width: '.$preset['settings']['width'].'px; margin: 0 auto;"><img src="'. $image_path .'" width="'.$preset['settings']['width'].'" height="'.$preset['settings']['height'].'" />';
  $result .= '<table width="100%">'.
      '<tbody><tr><td align="left"><a href="'.$response['!TermsAndConditions'].'">'.
      t('Gateway terms and conditions').'</a></td><td align="right"><a href="http://data.nbn.org.uk">'.
      '<img src="'.$response['!NBNLogo'].'" border="0"></a></td></tr></tbody></table></div>';
  return $result;  
}

/**
 * Implementation of hook_theme.
 */
function nbn_map_theme() {
  $theme = array();
  $theme["nbn_map_taxon_formatter_output"] = array(
      'arguments' => array('element' => NULL),
  );
  $theme["nbn_map_output"] = array(
      'arguments' => array('element' => NULL),
  );
  return $theme;
}

/**
 * Internal method to create the XML query required for a web service request.
 */
function nbn_map_build_query($element, $preset) {
  if (!empty($preset['settings']['datasets'])) {    
    $datasets = explode("\n", $preset['settings']['datasets']);
    if (count($datasets)>0) {      
      // clean the dataset keys
      foreach($datasets as &$dataset)         
        $dataset = ereg_replace("[^A-Z0-9]", "", $dataset);
      $datasetList = "<dat:DatasetList>\n<dat:DatasetKey>".implode("</dat:DatasetKey>\n<dat:DatasetKey>", $datasets)."</dat:DatasetKey>\n</dat:DatasetList>\n";
    } else 
      $datasetList = '';
  }
  $bandList = '';
  if (!empty($preset['settings']['bands'])) {
    // split the band definitions up by line
    $bands = explode("\n", $preset['settings']['bands']);    
    if (count($bands)>0) {
      foreach($bands as $band) {
        // split each definition up into the separate properties
        $properties = explode(',', $band);
        $propertiesSafe = array();
        foreach ($properties as $property) {  
          // split the property definition into a key value pair
          $keyValue = explode('=', $property);          
          // some validation
          if (count($keyValue)!=2) continue;
          if (trim($keyValue[0]) == 'from' || trim($keyValue[0]) == 'to')
            $keyValue[1] = ereg_replace("[^0-9]", "", $keyValue[1]);
          else if (trim($keyValue[0]) == 'border' || trim($keyValue[0]) == 'fill')
            $keyValue[1] = '#'.ereg_replace("[^A-F0-9]", "", $keyValue[1]);
          else 
            continue;          
          $propertiesSafe[] = trim($keyValue[0]) . '="' . $keyValue[1] .'"';
        }        
        $bandList .= '<map:Band '.implode(' ', $propertiesSafe).' />';
      }
      $bandList = "<map:Classification>$bandList</map:Classification>\n";
    }      
  }
  // get the vice county into the XML definition, if required
  if (!empty($preset['settings']['vice_county']))
    $vc = '<map:ViceCounty>' . ereg_replace("[^0-9]", "", $preset['settings']['vice_county']) . '</map:ViceCounty>';
  else
    $vc = '';
  $query = '<map:GridMapRequest registrationKey="'.$preset['settings']['registration'].'" xmlns:tax="http://www.nbnws.net/Taxon" '.
      'xmlns:dat="http://www.nbnws.net/Dataset" xmlns:map="http://www.nbnws.net/Map">'.
      '<tax:TaxonVersionKey>' . $element['#item']['safe_value'] . '</tax:TaxonVersionKey>'.
      '<map:Resolution>_' . $preset['settings']['resolution'] . '</map:Resolution>'.
      '<map:GridMapSettings>'.
        '<map:Width>' . $preset['settings']['width'] . '</map:Width>'.    
        '<map:Height>' . $preset['settings']['height'] . '</map:Height>'.
        '<map:Region>' . $preset['settings']['region'] . '</map:Region>'.
        $vc.
        '<map:Background>' . $preset['settings']['background'] . '</map:Background>'.
      '</map:GridMapSettings>'.
      $datasetList.
      $bandList.
    '</map:GridMapRequest>';
  return $query;
}
